\input texinfo @c -*-texinfo-*-
@c %**start of header
@setfilename idlwave
@settitle CUBISM User Manual
@dircategory CUBISM
@direntry
* CUBISM: (cubism).	IDL-based tool for Spitzer IRS Spectral Map Reduction
@end direntry
@set EDITION 1.0
@set VERSION 0.95
@set IDLVERSIONREQUIRED 6.1
@set DATE May, 2006
@set AUTHOR J.D. Smith
@set AUTHOREMAIL jdsmith@@as.arizona.edu
@set CUBISMHOMEPAGE http://sings.stsci.edu/cubism

@c %**end of header
@finalout

@ifinfo 
This file documents CUBISM, an IDL program for reducing and analyzing
IRS Spectral Maps.

This is edition @value{EDITION} of the @cite{CUBISM User Manual} for
CUBISM @value{VERSION}

Copyright @copyright{} 2006 J.D. Smith

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover texts being ``A GNU Manual'',
and with the Back-Cover Texts as in (a) below.  A copy of the license is
included in the section entitled ``GNU Free Documentation License'' in
the Emacs manual.

(a) The FSF's Back-Cover Text is: ``You have freedom to copy and modify
this GNU Manual, like GNU software.  Copies published by the Free
Software Foundation raise funds for GNU development.''

This document is part of a collection distributed under the GNU Free
Documentation License.  If you want to distribute this document
separately from the collection, you can do so by adding a copy of the
license to the document, as described in section 6 of the license.
@end ifinfo

@c
@c Title Page
@c

@titlepage
@title CUBISM User Manual
@subtitle IRS Spectral Map Analysis and Reduction
@subtitle Edition @value{EDITION}, @value{DATE}

@sp 4
@center @image{images/logo2,,,Cubism Logo}

@author by J.D. Smith and the SINGS team
@page

This is edition @value{EDITION} of the @cite{CUBISM User Manual} for
CUBISM version @value{VERSION}, @value{DATE}.
@sp 2

@cindex Copyright, of CUBISM
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover texts being ``A GNU
Manual'', and with the Back-Cover Texts as in (a) below.  A copy of the
license is included in the section entitled ``GNU Free Documentation
License'' in the Emacs manual.

(a) The FSF's Back-Cover Text is: ``You have freedom to copy and modify
this GNU Manual, like GNU software.  Copies published by the Free
Software Foundation raise funds for GNU development.''

This document is part of a collection distributed under the GNU Free
Documentation License.  If you want to distribute this document
separately from the collection, you can do so by adding a copy of the
license to the document, as described in section 6 of the license.
@end titlepage

@contents

@page

@ifnottex

@node Top, Introduction, (dir), (dir)

CUBISM is a package written in the Interactive Data Language (IDL),
which supports the analaysis and reduction of spectral maps created with
the @uref{http://ssc.spitzer.caltech.edu/irs/,IRS Spectrograph} aboard
the @uref{http://ssc.spitzer.caltech.edu/,Spitzer Space Telescope}.

@end ifnottex

@c menu

@menu
* Introduction::                
* Installation::                
* Quick Start Guide::           
* The Tools::                   
* Cube Assembly::               
* Cube Analysis::               
* Cube Validation::             
* CubeProject Reference::       
* CubeView Reference::          
* CubeSpec Reference::          
* Index::                       

@detailmenu
 --- The Detailed Node Listing ---

Installation

* Source Installation::         
* Binary Installation::         
* Setup::                       
* Upgrading::                   

The Tools

* CUBISM Project::              

Cube Assembly

* Input Files and Calibration::  Backgrounds:: Bad Pixels::
* Backgrounds::                 
* Bad Pixels::                  

Bad Pixels

* Selecting/Defining Bad Pixels::  

@end detailmenu
@end menu

@c=====================================
@c============= Chapters
@c=====================================


@c
@c Introduction
@c

@node Introduction, Installation, Top, Top
@chapter Introduction
@cindex Introduction

CUBISM is a package written in the Interactive Data Language (IDL),
which supports the analaysis and reduction of spectral maps created with
the @uref{http://ssc.spitzer.caltech.edu/irs/,IRS Spectrograph} aboard
the @uref{http://ssc.spitzer.caltech.edu/,Spitzer Space Telescope}.
CUBISM is designed to allow sets of basic calibrated data (@code{BCDs}) from
IRS mapping observations to be combined into single 3D spectral cubes,
with two spatial and one spectral dimension.  From these cubes, spectra
can be extracted over differing apertures, and arbitrary maps can be
made in spectral features (e.g. a line image).  

CUBISM consists of three main components, which together form the core
of its analysis and reduction capabilities:

@multitable @columnfractions .2 .8

@item CUBISM Project
@tab Manage @code{BCD} data, and track all the various information required to
build cubes, including calibration data, background information, bad
pixels, aperture information, etc.

@item CubeView
@tab General purpose viewer with a variety of tools for interacting with
2D spectral images, full spectral cubes, and visualization overlay FITS
images.

@item CubeSpec
@tab View and manipulate extracted spectra, and create maps from
spectral cubes.
@end multitable

@noindent CUBISM is not a general purpose spectral analysis tool.  What
analysis tools it offers are oriented directly towards the task of
creating, validating, and dissecting spectral cubes.  Since individual
spectra, spectral maps, and full spectral cubes can be output from a
single cube project, other tools can easily be used for higher order
analysis of these products (e.g. multiple Gaussian fitting, etc.).

This manual is organized as follows.  After discussing the installation
and requirements of CUBISM in @ref{Installation}, we give a quick start
guide to building a spectral cube from a mapping data set in @ref{Quick
Start Guide}.  We then cover in detail the menu options and capabilities
of the three main tools which comprise CUBISM.  Then we discuss in
greater depth the steps required to build a cube in @ref{Cube Assembly},
explain methods of analyzing the cube in @ref{Cube Analysis}, and cover
validating and improving cubes in @ref{Cube Validation}.

Note that this manual does not include information on planning IRS
spectral mapping observations; see the
@uref{http://ssc.spitzer.caltech.edu/irs/documents/specmap_bop/, IRS
Spectral Map HOWTO} for information on observation planning.


@c
@c Installation
@c

@node Installation, Quick Start Guide, Introduction, Top
@chapter Installation
@cindex Installation

CUBISM runs under IDL, and requires a working version of IDL to
function.  There are two means of installing CUBISM: as a set of source
@file{.pro} files which IDL finds on its search path, or as a
pre-compiled binary, which can be loaded as a single entity.  Both
versions can be found on @uref{@value{CUBISMHOMEPAGE}, the CUBISM home
page}.

The advantages of a source installation are:

@itemize @bullet
@item
Access to CUBISM's code for bug fixing or examining algorithms.
@item
Source level feedback when bugs occur (see XXX).
@item
Should continue to function with future versions of IDL.
@end itemize

@noindent The disadvantages of the source installation are:

@itemize @bullet
@item
Must install the @code{AstroLib} dependency library, at the required
version.  Some (small) risk of future changes in @code{AstroLib} causing
problems.
@item
Subject to routine name conflicts (e.g. two routines named
@file{routine.pro} on the path), so you must carefully set your
@code{IDL_PATH} to be sure CUBISM's files are found first.  This should
not be a common problem, but earlier distributions of SMART did have
some conflicting file names.
@end itemize

@noindent The advantages of installing and running a binary version of CUBISM:

@itemize @bullet
@item
All required routines are included in the compiled file at the required
version; no need to install external libraries.
@item
No routine name conflicts should occur.
@item 
Can be used with the freely available @emph{IDL VM}, if you don't have
access to an IDL license.
@end itemize


@noindent and the disadvantages:

@itemize @bullet
@item
No access to source code level debugging feedback when errors occur,
making it harder to track down problems.
@item
More closely tied to the IDL version; a given binary may not work with
all future versions of IDL (though typically binary compatibility
between IDL versions is quite good).
@end itemize

@menu
* Source Installation::         
* Binary Installation::         
* Setup::                       
* Upgrading::                   
@end menu

@node Source Installation, Binary Installation, Installation, Installation
@section Source Installation
@cindex, Installation, from source

The requirements for installing and running CUBISM from source are:

@enumerate
@item
A Linux/Solaris/Unix or MacOSX platform.  CUBISM may run under Windows,
but has not been tested there.
@item
A licensed copy of IDL at version @value{IDLVERSIONREQUIRED} or later.
Download @uref{http://rsinc.com/idl/,from RSI}.
@item
The @code{AstroLib} library, available from
@uref{http://idlastro.gsfc.nasa.gov/, NASA Goddard}.  Be sure to include
it on your @code{IDL_PATH}.
@item
A compiler for C source, typically @code{gcc}, or whatever the IDL
routine @code{MAKE_DLL} looks for.
@end enumerate

The compiler is required to auto-compile a small piece of C code used to
speed-up the cube building algorithm.  If this compilation fails, and
IDL version of this algorithm will be used, which gives the same
results, but operates more slowly.

To install CUBISM from source:

@enumerate
@item
Unpack the @file{cubism_vX.XX.tgz} file (where @file{X.XX} is the
version number) in a directory on the IDL path (e.g. @file{~/idl}).
@item
Ensure the @file{irs_cubism} directory which is unpacked is on the
@code{IDL_PATH}, e.g. by:

@code{setenv IDL_PATH <IDL_DEFAULT>:+$HOME/idl}

@end enumerate

@noindent System-wide installation is also possible: just install CUBISM
in a location accessible by your entire group.

@node Binary Installation, Setup, Source Installation, Installation
@section Binary Installation
@cindex, Installation, binary

The requirements for CUBISM running as a binary:

@enumerate
@item
A Linux/Solaris/Unix or MacOSX platform.  CUBISM may run under Windows,
but has not been tested there.
@item
A copy of IDL at version @value{IDLVERSIONREQUIRED} or later.  This can
either be a fully licensed copy, or the @emph{IDL VM}, the freely
available virtual machine.  Download either
@uref{http://rsinc.com/idl/,from RSI}.
@item
A compiler for C source, typically @code{gcc}, or whatever the IDL
routine @code{MAKE_DLL} looks for.
@end enumerate

Note that running CUBISM as a binary under the free @emph{IDL VM} does
not give you access to an IDL command line, so that only the graphical
interface to CUBISM is accessible.  With this setup, no analysis can be
performed at the command line, though all files, including spectra,
maps, and cubes can be output as normal.  Running the binary
distribution of CUBISM in a licensed version of IDL does not prevent
access to the command line.

@node Setup, Upgrading, Binary Installation, Installation
@section Setup
@cindex Setting CUBISM Up

CUBISM needs very little setup.  As long as the binary or source file
structure is left intact, CUBISM auto-discovers all the necessary
calibration and other files it needs.  One basic setup issue relates to
the color mode.  By default, IDL uses @emph{DECOMPOSED} color, in which
the RBG value of pixels is directly specified, whereas CUBISM (and most
astronomy software) relies on color table indices to specify color.  To
switch modes, try adding the following to the file you specify with
environment variable @code{IDL_STARTUP}:

@example
device,DECOMPOSED=0,TRUE_COLOR=24,RETAIN=2
@end example

@noindent You may not need the @code{RETAIN=2} setting depending on your window
manager (this forces IDL to keep track of the contents of windows when
they need to be redrawn, and is typically required under Linux).

Another potential issue relates to the @code{IDL_PATH}.  If you have a
source distribution of CUBISM, you will need to ensure that the
directories containing CUBISM are on your @code{IDL_PATH}.
Occasionally, two different packages will each define the same routine
in two files with the same names (a so-called @emph{name space
conflict}).  If you encounter this problem, move the CUBISM directories
higher on your @code{IDL_PATH}, or use the binary distribution, which
doesn't suffer name space conflicts.


@node Upgrading,  , Setup, Installation
@section Upgrading
@cindex Upgrading

Upgrading CUBISM is as simple as replacing the source or binary
installation directories and restarting IDL.  You can always find out
what version of CUBISM you are running with the menu @kbd{Info->About
Cubism} in the project window.

@c
@c Quick Start Guide   
@c

@node Quick Start Guide, The Tools, Installation, Top
@chapter Quick Start Guide
@cindex Quick Start

CUBISM has two major themes: building cubes from IRS Spectral Mapping
data sets, and analyzing those cubes.  Building cubes from collections
of mapping data sets is in principle a simple process: the correct @code{BCDs}
are collected together in a project, the cube build parameters are
adjusted, and the cube is built.  With the assembled cube, you can then
perform a variety of post-cube analysis including extracting spectra in
specific regions and building spectral maps.  There are many details
which can affect the cube assembly process, and impact the quality of
the final assembled product.  Here we will quickly go through the basic
steps required to build a cube, extract a spectrum, and build a spectral
map, leaving all of the (important) details aside for now.

An important note before we begin concerns the scope of a CUBISM
project.  Each CUBISM project pertains to a single order of a single IRS
module, e.g. LL1.  For data sets with mapping observations in all four
low-resolution orders, 4 individual cubes will likely be built, and
analzyed together.

To get going, type:

@example
IDL> cubism
@end example

@noindent and create a new cube, giving it a useful name when prompted.
Add a full set of mapping data with the @kbd{Add Data} button.  Just
navigate to a directory and click @kbd{OK}, and CUBISM will search for
all data files at or beneath that directory.  After selecting the
directory, CUBISM will group all discovered files by object and mapping
AOR, and allow you to select among them.  When prompted, choose the set
of data you are interested in, and they will be loaded into the project.
If you are warned that no calibration set has been loaded, and that the
latest is being used, simply acknowledge the warning.

Choose @kbd{Edit->Select All} and then @kbd{Record->View Record
Stack...} to popup a viewer displaying a stack of all the records.
Click @samp{WAVSAMP: Edit} and drag the aperture so that it lies fully
within the illuminated order, trimming perhaps 1 or 2 pixels from the
order ends (where the flat-field is problematic).  Back in the main
CubeProject window, choose @kbd{Cube->Build Cube}, and watch the build
progress.  When the cube is complete, hit the @kbd{View Cube} button to
display the cube in the same viewer window.  In this window, click on
the @kbd{Extract} button (a cube with a line through it), or select
@kbd{Tools->Extract Spectra and Stack Cubes}.  Click and drag a
rectangular extraction region, from upper left to lower right, on the
cube, and CubeSpec will popup showing you the extracted spectrum.  In
CubeSpec, click @kbd{Map} and then choose @samp{Region: Peak}.  Click
once at a low and high wavelength to define a peak region, and you've
just created a spectral map, which should now be displayed in CubeSpec.

Congratulations, you've just gone quickly through the most important
steps of cube assembly and analysis.  Read on to learn more about
building higher quality cubes, and more sophisticated methods of
analysis.

@c
@c The Tools
@c

@node The Tools, Cube Assembly, Quick Start Guide, Top
@chapter The Tools
@cindex Cubism Tools

Cubism consists of three main components, which are used together for
building and analyzing spectral cubes: CUBISM Project, CubeView, and
CubeSpec.  We will give here a description of the purpose and reference
of the features of each of the tools.

@c For a complete reference on the
@c capabilities and features of each tool, see the appropriate Appendix:
@c @ref{CubeProject Reference}, @ref{CubeView Reference}, @ref{CubeSpec
@c Reference}.


@menu
* CUBISM Project::              
@end menu

@node CUBISM Project,  , The Tools, The Tools
@section CUBISM Project
@cindex Project, CUBISM
@cindex CUBISM Project

The CUBISM Project is the central storehouse of all information relating
to a single spectral cube.  This is where the raw data are collected,
the calibration parameters are loaded and managed, preferences are set,
the cube is assembled, and outputs are saved.  A single CUBISM project
contains only information for one spectral cube.  There is a separate
project window for each open cube.  CUBISM projects, with all their
associated information, can be saved to and recovered from disk.  In a
sense, the ``project'' is the fundamental file type of CUBISM, and can
be manipulated in a similar way as a ``document'' in other applications
(Open/Close/Save/Revert/etc.).  You can have as many CUBISM projects
open at once as your memory will allow (though all ancillary other
windows associated with a given project can quickly overwhelm your
screen).

Any given CUBISM project can be read from and saved to disk, manipulated
from the command line, or interacted with via the GUI interface.  Here
is an example CUBISM Project window, populated with a mapping data set:

@float Figure, fig:pop_proj
@center @image{images/populated_project,6in,,Populated Cubism
     Project}
@caption{CUBISM Project Main Window}  
@end float

@node Data Records
@subsection Data Records
@cindex Data Records
@cindex @code{BCD} Records
@cindex Record Information

A CUBISM projects holds all of the data records necessary for building a
given cube, either the data, or a reference to the data on file (which
it loads on demand).  In @ref{fig:pop_proj}, four records have been
selected, and a variety of information is shown for each record:

@multitable @columnfractions .15 .85

@item @code{ID}
@tab A (hopefully) unique ID formed from filename.

@item @code{Exp}
@tab The @code{BCD} exposure time in seconds (from the headers).

@item @code{Observed}
@tab The date and time the @code{BCD} observation (GMT).
@item @code{Added}
@tab The date and time this data record was added to the project (local
time zone).

@item @code{Type}
@tab The type of the record, encoded as @samp{tMMO_pos}, with

@itemize @bullet
@item @samp{t}: The type of data record -- @samp{d} for @samp{DROOPRES},
@samp{c} for @samp{COADD}, @samp{f} for @samp{FLATAP}, or blank for the
(by far most common) @code{BCD}.  For information on these other flavors
of pipeline-produced IRS data see
@uref{http://ssc.spitzer.caltech.edu/irs/dh/,the IRS Data Handbook}.

@item @samp{M}: The module -- @samp{SL}, @samp{SH}, @samp{LL}, or @samp{LH}.

@item @samp{O}: The targeted order -- @samp{1}, @samp{2}, or blank, for
high-res or full-slit low-res (e.g. @samp{LLBoth}) targeting.

@item @samp{pos}: The position within the slit which was targeted --
@samp{cen}: the slit center, @samp{a}: nod position 1, @samp{b}: nod
position 2).  @samp{b}: nod position 2.
@end itemize

@item @code{Step}
@tab The step sequence within the map as @samp{I[X,Y]}, where @samp{I}
is the @samp{EXPID} of this step, and @samp{X} and @samp{Y} are the row
and column positions within the map.

@end multitable

@noindent A secondary page of information is available by clicking on the
right angle button at the extreme right edge of the header bar.  This
page includes:

@multitable @columnfractions .15 .85

@item @code{RA}
@tab RA targetted by the slit field of view position (J2000).

@item @code{DEC}
@tab DEC targetted by the slit field of view position (J2000).

@item @code{DATA}
@tab Whether the data for this record are loaded, rather than just a
link to the file.  Data are loaded on demand.

@item @code{UNC}
@tab Whether the associated uncertainty data for this record are
loaded.  These are discovered automatically alongside the primary data
products and loaded..

@item @code{BMSK}
@tab Whether the associated @code{BMASK} mask data for this record are
loaded.  The @code{BMASKs} are discovered automatically alongside the
primary data products and loaded.

@item @code{ACCT}
@tab Whether the ``accounting information'' for this record is cached,
mapping @code{BCD} pixels to sky pixels.

@item @code{BPL}
@tab Whether any record level bad pixels exist for this record
@pxref{Bad Pixels}.

@end multitable

Note that reference to the term @code{BCD} is inclusive of the other,
less commonly used files types (@samp{FLATAP}, @samp{DROOPRES}).  The
records can be sorted by any of the available data fields by clicking
the button associated with each header word, e.g. to sort by RA, click
@samp{RA}.


@node Menus
@subsection Menus
@cindex Project Window Menus
@cindex Menus, Project Window

Most of the options for assembling and saving information from the cube
are available in the menus of CUBISM Project.


@node Button Bar
@subsection Button Bar
@cindex Project Window Buttons
@cindex Buttons, Project Window





@node CubeView
@section CubeView
@cindex CubeView
@cindex Viewing Cubes
@cindex Viewing Maps


View and manipulate extracted spectra, and create maps from spectral
cubes.





@node CubeSpec
@section CubeSpec
@cindex CubeSpec
@cindex Spectra, Viewing

View and manipulate extracted spectra, and create maps from spectral
cubes.




@node Cube Assembly, Cube Analysis, The Tools, Top
@chapter Cube Assembly
@cindex Cube Assembly

@menu
* Input Files and Calibration::  Backgrounds:: Bad Pixels::
* Backgrounds::                 
* Bad Pixels::                  
@end menu





@node Input Files and Calibration, Backgrounds, Cube Assembly, Cube Assembly
@section Input Files and Calibration
@cindex @code{BCD} files
@cindex Calibration sets
@cindex Files, input
@cindex Input files

File naming convention.


@node Backgrounds, Bad Pixels, Input Files and Calibration, Cube Assembly
@section Backgrounds
@cindex Background subtraction



Notes on in situ, archive, and other sources for background subtraction,
including the use of the visualizer for selecting in situ @code{BCDs}.



@subsection In Situ Sky

Subtracting off contemporaneous sky data from your Spitzer IRS target
data does more than just remove foreground emission (e.g., zodiacal,
Galactic).  It also tremendously reduces the number of "bad pixels"
contaminating your data.

If you unfortunately do not have access to dedicated, contemporaneous,
off-target sky data, in many instances the physical configuration of the
IRS low-resolution modules provides an alternative.  Below is a
description of how to define sky data from IRS low-resolution
"outrigger" data.  The example given is for short-low (SL) data, but
similar steps can be taken for long-low data.

To define the low-resolution sky @code{BCDs}, and to create a corresponding
.bgl file for data cube construction within CUBISM:

@enumerate
@item
Load all the relevant SL (SL1+SL2) frames.  Don't mix data taken more
than a few days apart, to minimize the effects of day-to-day changes in
the bad pixel population.
@item
Use the AOR visualizer with an 8um image.  After using the histogram box
to scale the image such that low-level diffuse emission is apparent, hit
'v' to switch to visualize mode.  To define sky @code{BCDs} for SL1, for
example, set the cube build order to 2 (Cube-Set Cube Build Order->2) so
that SL1 is not on the bright target source, and see which SL1
outriggers conveniently land off your target.  Highlight these
outriggers with the mouse.  Save this information into a .bgl file using
Background->Save Background
Recs->m51_opticallyselected_extranuc_SL1.bgl.
@item
Repeat for SL2.
@end enumerate

@node Bad Pixels,  , Backgrounds, Cube Assembly
@section Bad Pixels
@cindex Bad Pixels
@cindex Rogue pixels

An exposition on selecting manual and automatic bad pixels.  Bad pixels
are bad.  Bad pixels, bad.

A number of marks are drawn in CubeView to indicate global bad pixels,
record level bad pixels, and various conditions and flags from the
pipeline generated mask files @code{BMASK} and @code{PMASK}.  The
various symbols seen when in @samp{Mark Bad Pixel} mode are:


@multitable @columnfractions .2 .8
@item Cyan @samp{x}s
@tab Global user-defined bad pixels, applying to all records.

@item Green @samp{x}s
@tab Record-level user bad pixels, applying only to a single record.

@item Blue @samp{+}s
@tab Locations where the @code{PMASK} (permanent mask) has any bit set.
The @code{PMASK} typically contains a small number of unruly pixels.

@item Red @samp{diamonds}s
@tab Non-fatal bits set in the @code{BMASK}.

@item Red @samp{x}s
@tab Fatal bits set in the @code{BMASK}.  These are bits 12, 13 and 14,
i.e. none or only one usable sample in the exposure ramp, or pixel
fatally flagged in the @code{PMASK}.

@end multitable

@noindent See the @uref{http://ssc.spitzer.caltech.edu/irs/dh/,IRS Data
Handbook} for a reference on the individual mask bits which the IRS
pipeline applies.  Note that despite being a fatal mask value, bit 8 in
the @code{BMASK} (not flat fielded) is not marked, since it occurs
everywhere off the orders.  All @code{BMASK} values, whether marked or
not, are indicated in the status display line.


When viewing and setting bad pixels in CubeView, @kbd{Mouse-3} can be
used to cycle through 4 settings controlling which bad pixels are
indicated:

@enumerate
@item
All mask and user-set bad pixels marks.
@item
All mask and user-set bad pixels marks, except for non-fatal
@code{BMASK} marks.
@item
All fatal @code{BMASK} mask and user-set bad pixel marks.
@item
Only user-set bad pixel marks.
@end enumerate

@noindent @kbd{Shift-Mouse-3} cycles in the opposite direction.


@menu
* Selecting/Defining Bad Pixels::  
@end menu

@node Selecting/Defining Bad Pixels,  , Bad Pixels, Bad Pixels
@subsection Selecting/Defining Bad Pixels

Bad pixels can be identified in CUBISM either 'manually' or in an
automatic fashion.  The procedure for automatically identifying bad
pixels is described in Section XX.

@enumerate
@item
 View the stack of relevant @code{BCDs}.
@item
 Show the wavsamp.
@item
 Click @samp{BGSub} (if available) to remove many bad pixels using the
 sky background data previously defined.
@item
 Enlarge the stack viewer to the largest possible perspective.
@item
 Show the current (cyan) bad pixel mask.
@item
 Set the scaling stretch to show just the very brightest pixels.
@item
 Mark ~ >4 sigma deviations, but ensure you are not marking line data!
@item
 Reset the scaling to show the next brightest set of pixels.
@item
 Mark ~ >4 sigma deviations.
@item
 Iterate this process until you can clearly see emisison lines, to the
point where the viewable pixels are no longer >4 sigma deviations.
@item
Save the bad pixel mask.
@item
Build the cube with this mask.
@item
Inspect each wavelength plane for weird, out-of-place columns/rows.
@item
Use the backtrack tool to note any additional pixels to be masked.
@item
Finally, extract a 1d spectrum and look for spikes that aren't lines.
@end enumerate


@node  Cube Analysis, Cube Validation, Cube Assembly, Top
@chapter Cube Analysis
@cindex Cube Analysis

A description of cube extraction, map making, map sets, line fitting,
etc.


@node  Cube Validation, CubeProject Reference, Cube Analysis, Top
@chapter Cube Validation
@cindex Cube Validation

A description of backtracking and other means of validating and
improving the cube, and checking on weak features, etc.



@c
@c Appendices
@c

@node CubeProject Reference, CubeView Reference, Cube Validation, Top
@appendix CubeProject Reference
@cindex CubeProject

A detailed listing of all CubeProject menus etc.

@node CubeView Reference, CubeSpec Reference, CubeProject Reference, Top
@appendix CubeView Reference
@cindex CubeView

A detailed listing of all CubeView tools, menus etc.

@node CubeSpec Reference, Index, CubeView Reference, Top
@appendix CubeSpec Reference
@cindex CubeSpec

A detailed listing of all CubeSpec, menus etc.

@node Index,  , CubeSpec Reference, Top
@unnumbered Index
@printindex cp

@bye
