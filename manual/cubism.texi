\input texinfo @c -*-texinfo-*-
@c %**start of header
@setfilename cubism
@settitle CUBISM User Manual
@dircategory CUBISM
@direntry
* CUBISM: (cubism).	IDL-based tool for Spitzer IRS Spectral Map Reduction
@end direntry
@set EDITION 1.0
@set VERSION 1.13
@set IDLVERSIONREQUIRED 6.1
@set DATE June, 2006
@set AUTHOR J.D. Smith
@set AUTHOREMAIL jdsmith@@as.arizona.edu
@set CUBISMHOMEPAGE http://sings.stsci.edu/cubism

@macro callout {text}
@quotation
@cartouche
@strong{\text\}
@end cartouche
@end quotation
@end macro

@c %**end of header

@finalout

@ifinfo 
This file documents CUBISM, an IDL program for reducing and analyzing
IRS Spectral Maps.

This is edition @value{EDITION} of the @cite{CUBISM User Manual} for
CUBISM @value{VERSION}

Copyright @copyright{} 2006 J.D. Smith

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover texts being ``A GNU Manual'',
and with the Back-Cover Texts as in (a) below.  A copy of the license is
included in the section entitled ``GNU Free Documentation License'' in
the Emacs manual.

(a) The FSF's Back-Cover Text is: ``You have freedom to copy and modify
this GNU Manual, like GNU software.  Copies published by the Free
Software Foundation raise funds for GNU development.''

This document is part of a collection distributed under the GNU Free
Documentation License.  If you want to distribute this document
separately from the collection, you can do so by adding a copy of the
license to the document, as described in section 6 of the license.
@end ifinfo

@c
@c Title Page
@c

@titlepage
@title CUBISM User Manual
@subtitle IRS Spectral Map Analysis and Reduction
@subtitle Edition @value{EDITION}, @value{DATE}

@sp 4
@center @image{images/logo2,,,Cubism Logo}

@author by J.D. Smith and the SINGS team
@page

This is edition @value{EDITION} of the @cite{CUBISM User Manual} for
CUBISM version @value{VERSION}, @value{DATE}.
@sp 2

@cindex Copyright, of CUBISM
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover texts being ``A GNU
Manual'', and with the Back-Cover Texts as in (a) below.  A copy of the
license is included in the section entitled ``GNU Free Documentation
License'' in the Emacs manual.

(a) The FSF's Back-Cover Text is: ``You have freedom to copy and modify
this GNU Manual, like GNU software.  Copies published by the Free
Software Foundation raise funds for GNU development.''

This document is part of a collection distributed under the GNU Free
Documentation License.  If you want to distribute this document
separately from the collection, you can do so by adding a copy of the
license to the document, as described in section 6 of the license.
@end titlepage

@contents

@page

@ifnottex

@node Top, Introduction, (dir), (dir)

CUBISM is a package written in the Interactive Data Language (IDL),
which supports the analaysis and reduction of spectral maps created with
the @uref{http://ssc.spitzer.caltech.edu/irs/,IRS Spectrograph} aboard
the @uref{http://ssc.spitzer.caltech.edu/,Spitzer Space Telescope}.

@end ifnottex

@c menu

@menu
* Introduction::                
* Installation::                
* Quick Start Guide::           
* The Tools::                   
* The Techniques::              
* Tips and Troubleshooting::    
* Index::                       

@detailmenu
 --- The Detailed Node Listing ---

Installation

* Source Installation::         
* Binary Installation::         
* Setup::                       
* Upgrading::                   

The Tools

* Tool Inter-Communication::    
* General Interface Tips::      
* CUBISM Project::              
* CubeView::                    
* CubeSpec::                    

General Interface Tips

* List Selection::              
* Scrolling::                   
* Mouse Shortcuts::             

CUBISM Project

* Project Title::               
* CUBISM Project Menus::        
* Data Records::                
* Status Bar::                  
* Button Bar::                  

Menus

* CUBISM Project File Menu::    
* CUBISM Project Edit Menu::    
* CUBISM Project Record Menu::  
* CUBISM Project Cube Menu::    
* CUBISM Project Background Menu::  
* CUBISM Project BadPix Menu::  
* CUBISM Project Info Menu::    

Info Menu

* Data Records::                
* Project Title::               
* Menus::                       
* Button Bar::                  

Data Records

* Record Info::                 
* Record Enabled State::        
* Record Data Types::           
* Operating on Records::        

CubeView

* CubeView Title Bar::          
* CubeView Menus::              
* CubeView Tools::              
* CubeView Colorbar::           
* CubeView Status Display Line::  
* CubeView Image Info Block::   
* CubeView WAVSamp Pane::       

Menus

* CubeView File Menu::          
* CubeView Options Menu::       
* CubeView Tools Menu::         

CubeView Tools

* Tool Interaction::            
* Box Regions::                 
* Tool Overview::               
* Zoom Tool::                   
* Histogram Tool::              
* Color Tool::                  
* Image Slicing Tool::          
* Box Statistics Tool::         
* Aperture Photometry Tool::    
* Cube Extraction Tool::        
* Pixel Backtracking Tool::     
* Bad Pixel Tool::              
* Pixel Table Tool::            
* Order Mask Tool::             
* Compass Rose Tool::           

The Techniques

* Cube Assembly::               
* Cube Analysis::               
* Cube Validation::             
* Cookbook::                    

Cube Assembly

* Input Files and Calibration::  Backgrounds:: Bad Pixels::
* Backgrounds::                 
* Bad Pixels::                  

Backgrounds

* In Situ Background::          
* Archive Background::          
* Background Blend::            
* 1D Sky Spectrum Background::  
* No Background::               
* Background Tips and Visualization::  

Bad Pixels

* Selecting/Defining Bad Pixels::  

Tips and Troubleshooting

* Debugging CUBISM::            

@end detailmenu
@end menu

@c=====================================
@c============= Chapters
@c=====================================


@c
@c Introduction
@c

@node Introduction, Installation, Top, Top
@chapter Introduction
@cindex Introduction

CUBISM is a package written in the Interactive Data Language (IDL),
which supports the analysis and reduction of spectral maps created with
the @uref{http://ssc.spitzer.caltech.edu/irs/,IRS Spectrograph} aboard
the @uref{http://ssc.spitzer.caltech.edu/,Spitzer Space Telescope}.
CUBISM is designed to allow sets of basic calibrated data (@code{BCDs})
from IRS mapping observations to be combined into single 3D spectral
cubes, with two spatial and one spectral dimension.  From these cubes,
spectra can be extracted over differing apertures, and arbitrary maps
can be made in spectral features (e.g. a continuum-subtracted line
image).

CUBISM was developed at the University of Arizona by the Spitzer
Infrared Nearby Galaxies Survey (SINGS) team, in partial fulfillment of
its Spitzer Legacy commitments.  It is distributed and supported by the
Spitzer Science Center at Caltech.

CUBISM consists of three main components, which together form the core
of its analysis and reduction capabilities:

@multitable @columnfractions .2 .8

@item CUBISM Project
@tab Manage @code{BCD} data, and track all the various information required to
build cubes, including calibration data, background information, bad
pixels, aperture information, etc.

@item CubeView
@tab General purpose viewer with a variety of tools for interacting with
2D spectral images, full spectral cubes, and visualization overlay FITS
images.

@item CubeSpec
@tab View and manipulate extracted spectra, and create maps from
spectral cubes.
@end multitable

@noindent CUBISM is not a general purpose spectral analysis tool.  What
analysis tools it offers are oriented directly towards the task of
creating, validating, and analyzing spectral cubes.  Since individual
spectra, spectral maps, and full spectral cubes can be output from a
single cube project, other tools can easily be used for higher order
analysis of these outputs (e.g. multiple Gaussian fitting, etc.).

This manual is organized as follows.  After discussing the installation
and requirements of CUBISM in @ref{Installation}, we give a quick start
guide to building a spectral cube from a mapping data set in @ref{Quick
Start Guide}.  We then cover in detail the menu options and capabilities
of the three main tools which comprise CUBISM.  Then we discuss in
greater depth the steps required to build a cube in @ref{Cube Assembly},
explain methods of analyzing the cube in @ref{Cube Analysis}, and cover
validating and improving cubes in @ref{Cube Validation}.

Note that this manual does not include information on planning IRS
spectral mapping observations; see the
@uref{http://ssc.spitzer.caltech.edu/irs/documents/specmap_bop/, IRS
Spectral Map HOWTO} for information on observation planning.

@c
@c Installation
@c

@node Installation, Quick Start Guide, Introduction, Top
@chapter Installation
@cindex Installation

CUBISM runs under IDL, and requires a working version of IDL to
function.  There are two means of installing CUBISM: as a set of source
@file{.pro} files which IDL finds on its search path, or as a
pre-compiled binary, which can be loaded as a single entity.  Both
versions can be found on @uref{@value{CUBISMHOMEPAGE}, the CUBISM home
page}.

The advantages of a source installation are:

@itemize @bullet
@item
Access to CUBISM's code for bug fixing or examining algorithms.
@item
Source level feedback when bugs occur (see XXX).
@item
Should continue to function with all future versions of IDL.
@end itemize

@noindent The disadvantages of the source installation are:

@itemize @bullet
@item
Must install the @code{AstroLib} dependency library, at the required
version.  Some (small) risk of future changes in @code{AstroLib} causing
problems.
@item
Subject to routine name conflicts (e.g. two routines named
@file{routine.pro} on the path), so you must carefully set your
@code{IDL_PATH} to be sure CUBISM's files are found first.  This should
not be a common problem, but earlier distributions of SMART did have
some conflicting file names.
@end itemize

@noindent The advantages of installing and running a binary version of CUBISM:

@itemize @bullet
@item
All required routines are included in the compiled file at the required
version; no need to install external libraries.
@item
No routine name conflicts should occur.
@item 
Can be used with the freely available @emph{IDL VM}, if you don't have
access to an IDL license.
@end itemize


@noindent and the disadvantages:

@itemize @bullet
@item
No access to source code level debugging feedback when errors occur,
making it harder to track down problems.
@item
More closely tied to the IDL version; a given binary may not work with
all future versions of IDL (though typically binary compatibility
between IDL versions within a few versions is quite good).
@end itemize

@menu
* Source Installation::         
* Binary Installation::         
* Setup::                       
* Upgrading::                   
@end menu

@node Source Installation, Binary Installation, Installation, Installation
@section Source Installation
@cindex, Installation, from source

The requirements for installing and running CUBISM from source are:

@enumerate
@item
A Linux/Solaris/Unix or MacOSX platform.  CUBISM may run under Windows,
but has not been tested there.
@item
A licensed copy of IDL at version @value{IDLVERSIONREQUIRED} or later.
Download @uref{http://rsinc.com/idl/,from RSI}.
@item
The @code{AstroLib} library, available from
@uref{http://idlastro.gsfc.nasa.gov/, NASA Goddard}.  Be sure to include
it on your @code{IDL_PATH}.
@item
A compiler for C source, typically @code{gcc}, or whatever the IDL
routine @code{MAKE_DLL} looks for.
@end enumerate

The compiler is required to auto-compile a small piece of C code used to
speed-up the main cube building algorithm.  If this compilation fails,
an IDL version of this algorithm will be used, which gives the same
results, but operates more slowly.

To install CUBISM from source:

@enumerate
@item
Unpack the @file{cubism_vX.XX.tgz} file (where @file{X.XX} is the
version number) in a directory on the IDL path (e.g. @file{~/idl}).
@item
Ensure the @file{irs_cubism} directory which is unpacked is on the
@code{IDL_PATH}, e.g. by:

@code{setenv IDL_PATH <IDL_DEFAULT>:+$HOME/idl}

@end enumerate

@noindent System-wide installation is also possible: just install CUBISM
in a location accessible by your entire group.

@node Binary Installation, Setup, Source Installation, Installation
@section Binary Installation
@cindex, Installation, binary

The requirements for CUBISM running as a binary:

@enumerate
@item
A Linux/Solaris/Unix or MacOSX platform.  CUBISM may run under Windows,
but has not been tested there.
@item
A copy of IDL at version @value{IDLVERSIONREQUIRED} or later.  This can
either be a fully licensed copy, or the @emph{IDL VM}, the freely
available virtual machine.  Download either
@uref{http://rsinc.com/idl/,from RSI}.
@item
A compiler for C source, typically @code{gcc}, or whatever the IDL
routine @code{MAKE_DLL} looks for.
@end enumerate

Note that running CUBISM from the binary @file{.sav} file under the free
@emph{IDL VM} does not give you access to an IDL command line, so that
only the graphical interface to CUBISM is accessible.  With this setup,
no analysis can be performed at the command line, though all files,
including spectra, maps, and cubes can be output as normal.  Running the
binary distribution of CUBISM in a licensed version of IDL does not
prevent access to the command line.

@node Setup, Upgrading, Binary Installation, Installation
@section Setup
@cindex Setting CUBISM Up

CUBISM needs very little setup.  As long as the binary or source file
structure is left intact, CUBISM auto-discovers all the necessary
calibration and other files it needs.  One basic setup issue relates to
the color mode.  By default, IDL uses @emph{DECOMPOSED} color, in which
the RBG value of pixels is directly specified, whereas CUBISM (and most
astronomy software) relies on color table indices to specify color.  To
switch modes, try adding the following to the file you specify with
environment variable @code{IDL_STARTUP}:

@example
device,DECOMPOSED=0,TRUE_COLOR=24,RETAIN=2
@end example

@noindent You may not need the @code{RETAIN=2} setting depending on your window
manager (this forces IDL to keep track of the contents of windows when
they need to be redrawn, and is typically required under Linux).

Another potential issue relates to the @code{IDL_PATH}.  If you have a
source distribution of CUBISM, you will need to ensure that the
directories containing CUBISM are on your @code{IDL_PATH}.
Occasionally, two different packages will each define the same routine
in two files with the same names (a so-called @emph{name space
conflict}).  If you encounter this problem, move the directory
containing CUBISM higher on your @code{IDL_PATH}, or use the binary
distribution, which doesn't suffer such name space conflicts.

@node Upgrading,  , Setup, Installation
@section Upgrading
@cindex Upgrading

Upgrading CUBISM is as simple as replacing the source or binary
installation directories and restarting IDL.  You can always find out
what version of CUBISM you are running with the menu @kbd{Info->About
Cubism} in the project window.

@c
@c Quick Start Guide   
@c

@node Quick Start Guide, The Tools, Installation, Top
@chapter Quick Start Guide
@cindex Quick Start

CUBISM has two major purposes: building cubes from IRS Spectral Mapping
data sets, and analyzing those cubes.  Building cubes from collections
of mapping data sets is in principle a simple process: the correct
@code{BCDs} are collected together in a project, the cube build
parameters are adjusted, and the cube is built.  Further refinement of
the cube includes identifying bad pixels to exclude from the cube build,
selecting and creating an appropriate background frame, configuring the
calibration details and cube build options, etc.

With the assembled cube, you can perform a variety of post-cube
analyses, including extracting spectra in specific regions and building
spectral maps.  There are many details which can affect the cube
assembly process, and impact the quality of the final assembled product.
Here we will quickly go through the basic steps required to build a
cube, extract a spectrum, and build a spectral map, leaving all of the
(important) details aside for now.

An important note before we begin concerns the scope of a CUBISM
project.  Each CUBISM project pertains to a single order of a single IRS
module, e.g. LL1.  For data sets with mapping observations in all four
low-resolution orders, 4 individual cubes will likely be built, and
analzyed as a set.

To get going, type:

@example
IDL> cubism
@end example

@noindent and create a new cube, giving it a useful name when prompted.
Add a full set of mapping data with the @kbd{Import AOR} button.  Just
navigate to a directory containing your archive-downloaded data set and
click @kbd{OK}.  CUBISM will search for all IRS data files at or beneath
that directory, and group all discovered data files by object and
mapping AOR, allowing you to select among them.  When prompted, choose
the set of data you are interested in (more than one is allowed, but
they must be from the same instrument module).  All the relevant files
will then be loaded into the project.  If you are warned that no
calibration set has been loaded, and that the latest is being used,
simply acknowledge the warning.

Choose @kbd{Edit->Select All} and then @kbd{Record->View Record
Stack...} to popup a viewer displaying a stack of all the records.
Click @samp{WAVSAMP: Edit} and drag the aperture so that it lies fully
within the illuminated order, trimming perhaps 1 or 2 pixels from the
order ends (where the flat-field is problematic).  Back in the main
CubeProject window, choose @kbd{Cube->Build Cube}, and watch the build
progress.  When the cube is complete, hit the @kbd{View Cube} button to
display the cube in the same viewer window.  In this window, click on
the @kbd{Extract} button (a cube with a line through it), or select
@kbd{Tools->Extract Spectra and Stack Cubes}.  Click and drag a
rectangular extraction region, from upper left to lower right, on the
cube, and CubeSpec will popup showing you the extracted spectrum.  In
CubeSpec, click @kbd{Map} and then choose @samp{Region: Peak}.  Click
and release once at a low and high wavelength to define a peak region,
and you've just created a spectral map, which should now be displayed in
CubeSpec.

Congratulations, you've just gone quickly through the most important
steps of cube assembly and analysis.  Read on to learn more about
building higher quality cubes, and more sophisticated methods of
analysis.

@c
@c The Tools
@c

@node The Tools, The Techniques, Quick Start Guide, Top
@chapter The Tools
@cindex Cubism Tools

Cubism consists of three main components, which are used together for
building and analyzing spectral cubes: CUBISM Project, CubeView, and
CubeSpec.  We will give here a description of the purpose and reference
of the features of each of these three tools, after some general tips on
using the interface, and background on the communication paths among the
tools.


@menu
* Tool Inter-Communication::    
* General Interface Tips::      
* CUBISM Project::              
* CubeView::                    
* CubeSpec::                    
@end menu

@node Tool Inter-Communication, General Interface Tips, The Tools, The Tools
@section Tool Inter-Communication

The tools which comprise CUBISM constantly communicate with each other,
so that updates in one are immediately reflected in the others.  For
example, when selecting bad pixels @pxref{Bad Pixel Tool}, the bad pixel
list for the associated CUBISM Project is immediately updated, or if a
new list is loaded from file, the viewer is updated.  Similar high level
communication occurs between all of the sub-tools, so that typically you
can regard a CUBISM project and all its associated windows and tools as
in a single, consistent state.


@node General Interface Tips, CUBISM Project, Tool Inter-Communication, The Tools
@section General Interface Tips
@cindex Interface Tips

The interactive component of CUBISM is based on IDL widgets, which, at
least on the Unix/OSX systems where CUBISM is tested, are derived from
the Motif widget set.  As such, a variety of common keyboard and mouse
shortcuts are available which can simplify interactive operations.

@menu
* List Selection::              
* Scrolling::                   
* Mouse Shortcuts::             
@end menu

@node List Selection, Scrolling, General Interface Tips, General Interface Tips
@subsection List Selection

@float Figure,fig:pop_sel
@center @image{images/project_selection,6in,,Example List Selection}
@caption{List with multiple regions selected.}
@end float

In any list (e.g. the CUBISM Project window, @pxref{CUBISM Project}),
individal list elements can be selected by clicking with the left mouse
button.  A range of elements can be selected by click-dragging.
Alternatively, the first element in a range can be selected, and then
the last element clicked while holding the @key{Shift} key.
Non-contiguous regions can be selected by holding the @key{Control}.
These methods can be combined, e.g. to select two non-adjacent regions,
click the first, scroll to and @key{Shift}-click the second, scroll to
and @key{Control}-click the third, and finally @key{Shift}-click the
last.  The arrow keys scroll the selection up or down, and the @key{Page
Up} and @key{Page Down} keys skip entire pages full of list items.



@node Scrolling, Mouse Shortcuts, List Selection, General Interface Tips
@subsection Scrolling

Though not required, list items can be made to respond to mouse scroll
wheel input by modifying a set of resources associated with the X11
windows environment.  To do so, add the following to your
@file{~/.Xdefaults} file:

@smallexample
*XmList.baseTranslations:       #augment Shift<Btn5Down>: ListNextItem()\n\
        Shift<Btn4Down>: ListPrevItem()\n\
        <Btn5Down>: ListNextPage()\n\
        <Btn4Down>: ListPrevPage()\n

*XmScrollBar.baseTranslations:  #augment <Btn4Down>: IncrementUpOrLeft(0) IncrementUpOrLeft(1)\n\
        <Btn5Down>: IncrementDownOrRight(0) IncrementDownOrRight(1)\n

*XmText.baseTranslations:       #augment Shift<Btn4Down>: page-left()\n\
        Shift<Btn5Down>: page-right()\n\
        <Btn4Down>: scroll-one-line-up()\n\
        <Btn5Down>: scroll-one-line-down()\n 
@end smallexample

@noindent and restart your X environment.

@node Mouse Shortcuts,  , Scrolling, General Interface Tips
@subsection Mouse Shortcuts

Double-clicking on a list item often results in some action being
performed on that item (e.g., view a record in the CUBISM Project
window).  The same effect results when @key{Return} is pressed with a
selected item.  In graphics windows (e.g. the CubeView window,
@pxref{CubeView}), mouse presses perform specific actions depending on
context.  Typically the left-mouse button performs the default options.
See the documentation for these tools for more information.


@node CUBISM Project, CubeView, General Interface Tips, The Tools
@section CUBISM Project
@cindex Project, CUBISM
@cindex CUBISM Project

The CUBISM Project is the central storehouse of all information relating
to a single spectral cube.  This is where the raw spectral data are
collected, the calibration parameters are loaded and managed,
preferences are set, the cube is assembled, and outputs are saved.  

@callout{A single CUBISM project contains information for only one
spectral cube, corresponding to a single IRS module and order.}

@noindent This includes sub-slits for single IRS modules, e.g. SL1 and SL2 would
be two separate cubes.  There is a separate project window for each open
cube. For information on how to extract spectra from matched areas in
multiple overlapping cubes, see XXX.

CUBISM projects, with all their associated meta-data, can be saved to
and recovered from disk, with the default file extension @file{.cpj}
(for ``Cubism Project'').  In a sense, the ``project'' is the
fundamental file type of CUBISM, and can be manipulated in a similar way
as a ``document'' in other applications (Open/Close/Save/Revert/etc.).
You can have as many CUBISM projects open at once as your memory will
allow (though all ancillary other windows associated with a given
project can quickly overwhelm your screen).

Any given CUBISM project can be read from and saved to disk, manipulated
from the command line, or interacted with via the GUI interface.
Internally, and on disk, a full CUBISM project is a single IDL object,
which contains a rich nested heirarchy of data and other information.
Typically, a project is interacted with via the graphical interface,
though it can be used directly from the command line as well.  Here is
an example CUBISM Project window, populated with a mapping data set:

@float Figure,fig:pop_proj
@center @image{images/populated_project,6in,,Populated Cubism Project}
@caption{CUBISM Project Main Window, with selected and disabled records.}
@end float

@menu
* Project Title::               
* CUBISM Project Menus::        
* Data Records::                
* Status Bar::                  
* Button Bar::                  
@end menu

@node Project Title, CUBISM Project Menus, CUBISM Project, CUBISM Project
@subsection Project Title
@cindex Title Bar, Project

The titlebar of the CUBISM Project encodes the name of the project,
surrounded by @samp{*}, if there are unsaved changes, as well as the
file name the project is saved to in @samp{<>} (angle brackets), or
@samp{<(unsaved)>} is the project is not yet saved.  Note that the file
name of a saved project, and the project name are distinct, though by
convention usually they are kept similar or the same.


@c
@c CUBISM Project Menus
@c


@node CUBISM Project Menus, Data Records, Project Title, CUBISM Project
@subsection Menus
@cindex Project Window Menus
@cindex Menus, Project Window

Most of the options for assembling and saving information from the cube
are available from the menus of CUBISM Project, which are documented
here in order of their appearance.

@menu
* CUBISM Project File Menu::    
* CUBISM Project Edit Menu::    
* CUBISM Project Record Menu::  
* CUBISM Project Cube Menu::    
* CUBISM Project Background Menu::  
* CUBISM Project BadPix Menu::  
* CUBISM Project Info Menu::    
@end menu

@node CUBISM Project File Menu, CUBISM Project Edit Menu, CUBISM Project Menus, CUBISM Project Menus
@subsubsection File Menu
@cindex File Menu, CUBISM Project

@table @code
@item New...
Create a new CUBISM project, prompting for the name.

@item Open...
Open an existing CUBISM project.

@item Save Setup

@table @code
@item Save Data with Project
Save all record data with the project (which can greatly increase the
project size on disk).

@item Save Clip Accounts with Project
Save all clipping information, which enables pixel backtracking, and
rapid cube rebuilds, with the project.  This will increase the project
size on disk.
@end table

@item Save
Save the project, prompting for a file to save to if not already set.

@item Save As...
Save the project as an alternate file.

@item Revert to Saved...
Recover the last saved version of the project from disk, discarding
current changes.

@item Write FITS Cube...
Write out the assembled cube (if any) as a FITS cube, along with an
associated uncertainty cube (if built).

@item Rename Project...
Rename the project (which doesn't affect the file to which the project
is saved).

@item Export to Command Line...
Export the full CUBISM Project object to the IDL command line, prompting
for the variable name.

@item Load New Calibration Set...
Load an alternate calibration set.

@item Close
Close the project window, prompting to save if changes have been made.

@end table

@node CUBISM Project Edit Menu, CUBISM Project Record Menu, CUBISM Project File Menu, CUBISM Project Menus
@subsubsection Edit Menu
@cindex Edit Menu, CUBISM Project

@table @code
@item Select All
Select all the records.

@item Select By Filename
Select records with files matching a given expression.

@item Select By Keyword
Select records with keyword matching a given expression.

@item Invert Selection
Select an non-selected records, and de-select all selected records.

@item Deselect Disabled
Deselect any selected record which is disabled.

@item Replace File Substring...
Replace a given substring in the file names of the selected records with
another string.

@end table


@node CUBISM Project Record Menu, CUBISM Project Cube Menu, CUBISM Project Edit Menu, CUBISM Project Menus
@subsubsection Record Menu
@cindex Record Menu, CUBISM Project

@table @code
@item Add Data...

@item Import Data from Mapping AOR
Import data from entire mapping AORs, selecting among the AORs present
at or below the selected directory.

@table @code
@item BCD...
Import BCD data (flat-fielded and straylight-corrected).

@item DroopRes...
Import DroopRes data (not flat-fielded, not straylight-corrected).

@item FlatAp...
Import FlatAp data (flat-fielded, not straylight-corrected).

@end table

@item Import Data by module
Import all records found at or below the selected directory, grouped by
module (independent of any AOR).

@table @code
@item BCD...
Import BCD data (flat-fielded and straylight-corrected).

@item DroopRes...
Import DroopRes data (not flat-fielded, not straylight-corrected).

@item FlatAp...
Import FlatAp data (flat-fielded, not straylight-corrected).

@end table

@item Load Record Masks
Load the BMASKs associated with any newly added records.

@item Load Record Uncertainties
Load the BCD uncertainty files for any newly added records.

@item Switch Record Data Type...
Prompt for and wwitch the data type of the selected records among BCD,
FlatAp, and DroopRes.

@item Restore All Record Data
Recover from file the data for all records (these are normally recovered
on demand).

@item View Record/View Stack...
View the selected record, or an average stack of records if more than
one is selected, using a pre-existing viewer window if available.  Note
that double-clicking a record or hitting @key{Return} on a selected
record has the same effect.

@item View Record (new viewer)/View Stack (new viewer)...
View the selected record, or an average stack of records if more than
one is selected, using a new viewer window.

@item View Uncertainty...
View the associated uncertainty image of the selected record, or the
quadrature sum of uncertainties if more than one is selected, using a
pre-existing record viewer window if available.

@item View Uncertainty (new viewer)...
View the associated uncertainty image of the selected record, or the
quadrature sum of uncertainties if more than one is selected, using a
new viewer window.

@item Delete
Delete the selected record(s) from the project.

@item Rename
Change the ID of the first select record.

@item Disable
Disable the selected record(s), preventing them from being built in the
cube.

@item Enable
Enable the selected record(s), allowing them to be built in the cube.

@item Show Filenames...
Show the filenames associated with the selected record(s).

@item Show Header...
Show the header(s) of the selected record(s).

@item Show Keyword Value(s)...
Show the value(s) of a selected FITS header keyword for the selected
record(s).

@item Visualize AORs...
Load a FITS image and visualize the mapping AORs on it, using a
pre-existing visualization viewer window if available.

@item Visualize AORs (new viewer)...
Load a FITS image and visualize the mapping AORs on it in a new viewer
window.

@item Load New Visualization Image...
Load an alternate image for visualizing AORs.

@end table


@node CUBISM Project Cube Menu, CUBISM Project Background Menu, CUBISM Project Record Menu, CUBISM Project Menus
@subsubsection Cube Menu
@cindex Cube Menu, CUBISM Project

@table @code
@item Build Cube
Build the cube from the enable records.

@item Reset Accounts
Reset the clipping accounts (which speed cube re-build and enable pixel
backtracking).

@item View Cube...
View the cube in a pre-existing cube viewer window, if available.

@item View Cube (new viewer)...
View the cube in a new viewer window.

@item Show Cube Build Feedback
If enabled, plot cube build feedback while the cube builds.

@item Build Cube with FLUXCON
Build the cube using flux calibration.

@item Build Cube with SLCF
Apply the slit loss correction function to the assembled cube, to
correct for differential diffractive slit losses for extended sources.

@item Subtract Background
Subtract the set background from each record when building the cube.

@item Trim Wavelengths
Trim the unreliable ends of the orders, omitting those wavelength planes
from the cube.

@item Use Reconstructed Positions
Use positions reconstructed from the spacecraft telemetry, rather than
the commanded positions.

@item Build Uncertainty Cube
Build an associated uncertainty cube, if record-level uncertainties are
available.


@item Set Cube Build Order...
Set the cube build order.

@item Aperture(s)...
Show the WAVSAMP apertures used for the various orders.

@end table



@node CUBISM Project Background Menu, CUBISM Project BadPix Menu, CUBISM Project Cube Menu, CUBISM Project Menus
@subsubsection Background Menu
@cindex Background Menu, CUBISM Project

@table @code
@item Set Background from Rec(s)...
Set the record-level background from the selected records, prompting for
an average of trimmed-average combination.

@item Load Background Rec(s)...
Load a saved list of background records to use from a @file{.bgl} file.

@item Background Blend
@table @code
@item Set and Scale Background A...
Set the first background in a blend from the selected records,
specifying its fiducial point.

@item Set and Scale Background B...
Set the second background in a blend from the selected records,
specifying its fiducial point.

@item Blend A and B Backgrounds...
Create a final background by blending backgrounds A and B according to
weights calculated from a target fiducial value.

@item View Background A...
View the first blend background, and select the records associated with it.

@item View Background B...
View the second blend background, and select the records associated with it.
@end table

@item Save Background Rec(s)...
Save the list of backgrounds records used as a @file{.bgl} file.

@item View Background...
View the record background, if any, in a pre-existing record viewer
window, if available.

@item View Background (new viewer)...
View the record background, if any, in a new record menu.

@item Remove Background
Remove the assembled background.

@item Rebuild Background
Recreate background from its associated record data.

@item Load Background Spectrum...
Load a 1D background spectrum from an extracted @file{.tbl} file.

@item Remove Background Spectrum
Remove any loaded 1D background spectrum.

@end table

@node CUBISM Project BadPix Menu, CUBISM Project Info Menu, CUBISM Project Background Menu, CUBISM Project Menus
@subsubsection BadPix Menu
@cindex BadPix Menu, CUBISM Project

@table @code
@item Load Bad Pixels...
Load a saved list of bad pixels from a @file{.bpl} file, replacing any
existing bad pixels already set.

@item Load and Append Bad Pixels...
Load a saved list of bad pixels from a @file{.bpl} file, appending to
any existing bad pixels already set.

@item Save Bad Pixels...
Save the list of global and record-level bad pixels to a @file{.bpl}
text file.

@item Clear Global Bad Pixels
Clear all global bad pixels.

@item Clear Record Bad Pixels
Clear all record-specific bad pixels.

@item Clear All Bad Pixels
Clear all global and record-level bad pixels.

@item Auto-Gen Global Bad Pixels...
Attempt to automatically generate global bad pixels from redundant
information in well sampled cubes, prompting for detection parameters.

@item Auto-Gen Record Bad Pixels...
Attempt to automatically generate record-level bad pixels for all
records, prompting for detection parameters.

@end table


@node CUBISM Project Info Menu,  , CUBISM Project BadPix Menu, CUBISM Project Menus
@subsubsection Info Menu
@cindex Info Menu, CUBISM Project

@table @code
@item Project Parameters...
Display the currently configured project parameters.

@item As-Built Parameters...
Display the project parameters at the time the most recent cube was
assembled.

@item Calibration Set Details...
Show the details of the currently loaded calibration set.

@item Debug Cubism
Enable CUBISM debugging, so that errors will halt at the command line
with full traceback information.

@item About Cubism
Show the current CUBISM version, and the version which was used to
assemble the loaded project (if different).

@end table



@menu
* Data Records::                
* Project Title::               
* Menus::                       
* Button Bar::                  
@end menu

@node Data Records, Status Bar, CUBISM Project Menus, CUBISM Project
@subsection Data Records
@cindex Data Records
@cindex @code{BCD} Records
@cindex Record Information

A CUBISM projects holds all of the data records (often called simply
@emph{BCDs} --- see below) necessary for building a given cube.  The
records either include the data directly, or hold a file reference to
the data on disk, which is loaded on demand.  In @ref{fig:pop_proj}, two
records have been selected.  In addition to the spectrum data frame,
each record holds (optionally) the associated uncertainty frame, and the
@code{BMASK} pixel mask frame.

@menu
* Record Info::                 
* Record Enabled State::        
* Record Data Types::           
* Operating on Records::        
@end menu

@node Record Info, Record Enabled State, Data Records, Data Records
@subsubsection Record Info
@cindex Record Information

A variety of information is shown for each record, and the records can
be sorted by individual columns clicking on the column's header.  The
information recorded is:

@multitable @columnfractions .15 .85

@item @code{ID}
@tab A (hopefully) unique ID formed from filename.

@item @code{Exp}
@tab The @code{BCD} exposure time in seconds (from the headers).

@item @code{Observed}
@tab The date and time the @code{BCD} observation (GMT).
@item @code{Added}
@tab The date and time this data record was added to the project (local
time zone).

@item @code{Type}
@tab The type of the record, encoded as @samp{tMMO_pos}, with

@itemize @bullet
@item @samp{t}: The type of data record -- @samp{d} for @samp{DROOPRES},
@samp{c} for @samp{COADD}, @samp{f} for @samp{FLATAP}, or blank for the
(by far most common) @code{BCD}.  For information on these other flavors
of pipeline-produced IRS data see
@uref{http://ssc.spitzer.caltech.edu/irs/dh/,the IRS Data Handbook}.

@item @samp{M}: The module -- @samp{SL}, @samp{SH}, @samp{LL}, or @samp{LH}.

@item @samp{O}: The targeted order -- @samp{1}, @samp{2}, or blank, for
high-res or full-slit low-res (e.g. @samp{LLBoth}) targeting.

@item @samp{pos}: The position within the slit which was targeted --
@samp{cen}: the slit center, @samp{a}: nod position 1, @samp{b}: nod
position 2).  @samp{b}: nod position 2.
@end itemize

@item @code{Step}
@tab The step sequence within the map as @samp{I[X,Y]}, where @samp{I}
is the @samp{EXPID} of this step, and @samp{X} and @samp{Y} are the row
and column positions within the map.

@end multitable

@noindent A secondary page of information is available by clicking on the
right angle toggle button at the extreme right edge of the header bar.
This page includes:

@multitable @columnfractions .15 .85

@item @code{RA}
@tab RA targetted by the slit field of view position (J2000).

@item @code{DEC}
@tab DEC targetted by the slit field of view position (J2000).

@item @code{DATA}
@tab Whether the data for this record are loaded, rather than just a
link to the file.  Data are loaded on demand.

@item @code{UNC}
@tab Whether the associated uncertainty data for this record are
loaded.  These are discovered automatically alongside the primary data
products and loaded.

@item @code{BMSK}
@tab Whether the associated @code{BMASK} mask data for this record are
loaded.  The @code{BMASKs} are discovered automatically alongside the
primary data products and loaded.

@item @code{ACCT}
@tab Whether the ``accounting information'' for this record is cached,
mapping @code{BCD} pixels to sky pixels.

@item @code{BPL}
@tab Whether any record level bad pixels exist for this record
@pxref{Bad Pixels}.

@end multitable

The records can be sorted by any of the available data fields by
clicking the button associated with each header word, e.g. to sort by
RA, click @samp{RA}.

@node Record Enabled State, Record Data Types, Record Info, Data Records
@subsubsection Record Enabled State
@cindex Enabled, Records
@cindex Disabled, Records

All data records can either be @emph{enabled} or @emph{disabled}.
Disabled records have lines drawn through them in the project display
(@pxref{fig:pop_proj}).  Disabled records can be viewed and interacted
with normally, but are not included in the assembled cube.  This can be
useful to omit the rare frame with garbled data, or to include data in
the project solely for the purpose of constructing a background.  Note
that failing to disable records which are not associated with the AOR(s)
constituting the map can cause the cube created to be very large or even
fail.

@node Record Data Types, Operating on Records, Record Enabled State, Data Records
@subsubsection Record Data Types
@cindex BCD
@cindex FlatAp
@cindex DroopRes

The IRS pipeline produces a variety of different types of output
spectral data with differing levels of processing applied.  The standard
product which CUBISM uses is the @code{BCD}, or basic calibrated data.
In addition, however, CUBISM can operate on @code{DroopRes} (not
flat-fielded or straylight-corrected) and @code{FlatAp} (not
straylight-corrected) data files.  See
@uref{http://ssc.spitzer.caltech.edu/irs/dh/,the IRS Data Handbook} for
more information on these different data products.  Typically, they
would be used in CUBISM to test results only if problems with the
flat-field or straylight-correction (SL) were suspected.

Note that reference to the term @code{BCD} throughout this manual is
inclusive of the other, less commonly used files types (@samp{FlatAp},
@samp{DroopRes}).

@node Operating on Records,  , Record Data Types, Data Records
@subsubsection Operating on Records
@cindex Record Operations

Individual records or groups of records can be examined for header
information, renamed, deleted, enabled/disabled, viewed as an individual
or a stack, averaged into a background frame, and much more.  Most of
these options are accessible from the @code{Record} menu (@pxref{CUBISM
Project Record Menu}).  A very common operation is to view a record,
which is done by simply double-clicking it, or selecting one or more
records and hitting the @code{View Stack} button.


@node Status Bar, Button Bar, Data Records, CUBISM Project
@subsection Status Bar

Beneath the record list, a text-based status bar gives feedback on the
state of completion of the current operation, the number of selected
records, etc.


@node Button Bar,  , Status Bar, CUBISM Project
@subsection Button Bar
@cindex Project Window Buttons
@cindex Buttons, Project Window

The button bar at the base of the CUBISM Project window provides
convenient access to common functions, also available with menu options
or mouse shortcuts.

@table @code
@item Enable
Enable the selected record(s).

@item Disable
Disable the selected record(s).

@item Header
Show the header(s) for the selected record(s).

@item View Record/View Stack
View the selected record, or an average stack of the selected records,
if more than one selected.

@item View Cube
View the assembled cube, if available.

@item Import AOR
Import BCD records from full mapping AORs found at or beneath the
selected directory.

@item Save
Save the current project, prompting for a file if not yet set.

@item Close
Close the current project, prompting to save any unsaved changes.

@end table



@node CubeView, CubeSpec, CUBISM Project, The Tools
@section CubeView
@cindex CubeView
@cindex Viewing Cubes
@cindex Viewing Maps


The CubeView tool is a custom viewer, with general purpose as well as
IRS-specific tools and configuration options.  It is used to view BCD
records, stacks of records, or special frames like the background frame,
full spectral cubes --- as individual planes or maps created from the
cube --- and AOR visualization images.  You can have as many instances
of the viewer as you want, and each can be configured differently.  By
default, individual CUBISM projects attempt to target their own set of
viewer windows, only creating a new window if none is presently
available.

@menu
* CubeView Title Bar::          
* CubeView Menus::              
* CubeView Tools::              
* CubeView Colorbar::           
* CubeView Status Display Line::  
* CubeView Image Info Block::   
* CubeView WAVSamp Pane::       
@end menu

@node CubeView Title Bar, CubeView Menus, CubeView, CubeView
@subsection Title Bar

The title bar of CubeView gives an indication of what is currently being
displayed.  An example is @samp{Record: ngc5194 <Average of 36 recs>}.
This information will change depending on whether a record, background
record, cube, map, or visualization image is shown.  The same
information is repeated below the line status bar in the image info
block.

@node CubeView Menus, CubeView Tools, CubeView Title Bar, CubeView
@subsection Menus

@menu
* CubeView File Menu::          
* CubeView Options Menu::       
* CubeView Tools Menu::         
@end menu

@node CubeView File Menu, CubeView Options Menu, CubeView Menus, CubeView Menus
@subsubsection File Menu
@cindex File Menu, CubeView

@table @code
@item Save as PNG...
Save the current image as a PNG file.

@item Save Map as FITS...
Save the current spectral map (if available) as a FITS file, with
complete WCS header information.

@item Export to Command Line...
Export the current image as an array variable on the IDL command line.

@item Extract Region from File...
Extract a spectrum from the current cube using the extraction region
encoded in the header of an existing extracted spectrum (@file{.tbl}
file).

@item Close
Close the viewer Window

@end table

@node CubeView Options Menu, CubeView Tools Menu, CubeView File Menu, CubeView Menus
@subsubsection Options Menu
@cindex Options Menu, CubeView

@table @code
@item Colormaps
Change the display color map for the image and color bar.

@item Scale Image
@table @code
@item Linear
Scale image linearly between the clipping limits.

@item Square Root
Scale image as the square root between the clipping limits.

@item Logarithmic
Scale image logarithmically between the clipping limits.

@item Histogram Equalization
Scale image between the clipping limits to generate a flat final color
histogram.

@item Trim 1%, 5%
Before scaling, first trim 1%, 5% from the distribtion of pixel values being
scaled (full image or histogram box).
@end table

@item Set Scale Range...
Explicitly set and lock the low and high scale clipping limits.

@item Freeze Scaling 
Lock/Unlock the low and high scale clipping limits at their current value.
This can also be done with @key{Space}.

@item Set Size
@table @code

@item 256,384,512,768
Set the size of the display image to this width.

@item Wrap
Enlarge the display image size to show the entire image at the current
zoom (up to the size of the monitor).

@end table
@end table


@node CubeView Tools Menu,  , CubeView Options Menu, CubeView Menus
@subsubsection Tools Menu
@cindex Tools Menu, CubeView

The tools menu provides an alternative means of selecting among the
viewer tools in the tool palette at the top of the CubeView viewer
window.  @xref{CubeView Tools}.

@node CubeView Tools, CubeView Colorbar, CubeView Menus, CubeView
@subsection CubeView Tools
@cindex Tools, CubeView
@cindex Tool Palette, CubeView


The viewer offers a number of individual tools for interacting with the
viewed data, some of which are generic and always available, and others
of which are specific to certain data types.  The tools are accessible
via the palette, through keyboard shortcuts, and via the @code{Tools}
menu.  Other tools accessible below the displayed window will be
discussed in the next section.

An example CubeView showing a stack average of 36 records is shown
@ref{fig:cv_recs}.

@float Figure,fig:cv_recs
@center @image{images/cubeview_recs,4.332in,,CubeView Showing Stack}
@caption{CubeView, showing a stack of 36 records, with histogram scaling
box and WAVSamp display.}
@end float


@menu
* Tool Interaction::            
* Box Regions::                 
* Tool Overview::               
* Zoom Tool::                   
* Histogram Tool::              
* Color Tool::                  
* Image Slicing Tool::          
* Box Statistics Tool::         
* Aperture Photometry Tool::    
* Cube Extraction Tool::        
* Pixel Backtracking Tool::     
* Bad Pixel Tool::              
* Pixel Table Tool::            
* Order Mask Tool::             
* Compass Rose Tool::           
@end menu

@node Tool Interaction, Box Regions, CubeView Tools, CubeView Tools
@subsubsection Tool Interaction

Their are two categories of main CubeView tools, @emph{exclusive} tools,
which require exclusive control of the mouse inputs, and
@emph{non-exclusive} tools, any number of which can be active at any
time.  These two types are separated in the tool palette, with exclusive
tools grouped at left, and non-exclusive tools grouped at right
@pxref{fig:cv_recs}.  Selecting an exclusive tool enters a mode of
operation in which mouse inputs are interpreted by that tool alone.  

Cubeview tools can be toggled on or off by clicking the button,
selecting the @kbd{Tools} menu item, or using the key shortcuts.  The
currently active tool(s) (if any) are indicated by depressed buttons in
the tool palette, and with tick marks in the @kbd{Tools} menu.  If an
exclusive tool is already active, toggling it on again (as opposed to
simply selecting another tool) serves as a ``reset'', which restores it
to its initial state, for instance removing any box area which has been
defined.  Other tools which draw marks or annotations on top of the
image keep those marks drawn even when they are not active.  An example
is the bad pixel tool, which continues to display bad pixel marks even
when it is not the active tool.  To remove these displays, @emph{reset}
the tool as described.

Tooltips identifying the tool, its key shortcut, and associated mouse
operations (encoded as @samp{[left | middle | right]}) can be displayed
by hovering the mouse over the tool button in the tool palette.

@node Box Regions, Tool Overview, Tool Interaction, CubeView Tools
@subsubsection Box Regions

Multiple tools make use of box regions, for instance to define an area
for computing statistics or scaling the image (see, e.g., the red box in
@ref{fig:cv_recs}).  When another tool is activated, these tools leave
behind ``corners'' of the box area to indicate their selection.
Reactivating the tool restores this preexisting box.  Click and drag
from upper left to lower right to define a box area initially.  Click
and drag within the box to move it, or on the ``handle'' at lower right
to resize it.  The arrow keys also move the position of the box, by one
pixel at a time.  Reset the box as described in @ref{Tool Interaction}.

@node Tool Overview, Zoom Tool, Box Regions, CubeView Tools
@subsubsection Tool Overview

The individual exclusive tools with their button icons are:

@multitable @columnfractions .1 .3 .4 .2
@headitem Button @tab Tool @tab Purpose @tab Shortcut

@item @image{images/cvp_zoom} 
@tab Zooming
@tab Zoom in and out of images
@tab @kbd{z}

@item @image{images/cvp_hist}
@tab Histogram Scaling
@tab Re-scale image to highlight local features
@tab @kbd{h}

@item @image{images/cvp_color}
@tab Color Table
@tab Adjust color table end points and gamma
@tab @kbd{c}

@item @image{images/cvp_slice}
@tab Image Slicing
@tab Plot data slices through images, with position feedback
@tab @kbd{l}

@item @image{images/cvp_stats}
@tab Box Statistics
@tab Calculate and report statistics in box
@tab @kbd{s}

@item @image{images/cvp_phot}
@tab Aperture Photometry
@tab Perform simple circular aperture photometry on sources
@tab @kbd{p}

@item @image{images/cvp_extract}
@tab Cube Extraction
@tab Extract spectra from rectangular regions from the cube
@tab @kbd{x}

@item @image{images/cvp_bt}
@tab Pixel Backtracking
@tab Backtrack cube pixels to contributing BCD pixels
@tab @kbd{t}

@item @image{images/cvp_badpix}
@tab Bad Pixel
@tab Examine and edit the global and record level bad pixels
@tab @kbd{p}

@item @image{images/cvp_viz}
@tab Visualization 
@tab Overlay AOR slit positions and permit selecting records from the overlay
@tab @kbd{v}

@end multitable

The non-exclusive tools are:

@multitable @columnfractions .1 .3 .4 
@headitem Button @tab Tool @tab Purpose 

@item @image{images/cvpne_pxtbl}
@tab Pixel Table
@tab Display a grid of pixel values under the cursor

@item @image{images/cvpne_mask}
@tab Order Mask
@tab Mask out all data outside the orders

@item @image{images/cvpne_rose}
@tab Compass Rose
@tab Display a compass rose
@end multitable

Among the tools, Cube Extraction can only be used when viewing a cube,
pixel backtracking can only be used when viewing a single cube plane,
bad pixels and order masking are enabled only when viewing BCD data,
Visualization is only possible with a visualization image, and the
Compass Rose is disabled except with cubes and visualization images
(i.e. images with WCS information).


@node Zoom Tool, Histogram Tool, Tool Overview, CubeView Tools
@subsubsection Zoom Tool
@cindex Zooming Images

The zoom tool allow arbitrary zooming in on image regions.  By default,
images are display at the maximum zoom which fits the entire image in
the display window.  To zoom in, drag a rectangular region around the
area of interest, or simply left-click to double the zoom level and
center on the clicked region.  To zoom out, right-click.  All zoom
levels are saved onto a ``zoom stack'', which is navigated backwards one
step at a time.  To zoom all the way out, right double-click.

When an image is zoomed in, middle-click dragging (or Control-click
dragging) pans the image.  If the display canvas is resized (either
using the @kbd{Set Size} menu item, see @ref{CubeView Options Menu}, or
by re-sizing the entire CubeView window), the image is re-zoomed.

The zoom tool's key shortcut is @kbd{z}.

@node Histogram Tool, Color Tool, Zoom Tool, CubeView Tools
@subsubsection Histogram Tool
@cindex Histogram Tool
@cindex Image Scaling

The histogram tool is actually an image rescaling tool.  It allows you
to identify a region of the image, and re-scale the image to emphasize
it.  Simply create a box area, or move and resize an existing box area,
to the region of interest.  The scaling mode can be linear, square root,
logarithmic, or histogram equalizing, with 1% or 5% trimming available,
in the @kbd{Options->Scale Image} menu.  By default, the entire image is
scaled.  This tool also draws a histogram of the resulting image colors
on the colorbar (see XXX), and gives the scaling range.  The scale
clipping limits can be frozen with @key{Space}, or set directly using
@kbd{Options->Set Scale Range}.  It can be convenient to ``reset'' the
histogram tool to remove it's box area and define a new one, in
particular if you are zoomed in on a different region of the image.  To
quickly reset and turn it back on, hit the key shortcut twice. The box
region for the statistics tool is red, and can be seen in
@ref{fig:cv_recs}.

The histogram tool's key shortcut is @kbd{h}.  

@node Color Tool, Image Slicing Tool, Histogram Tool, CubeView Tools
@subsubsection Color Tool

The histogram tool provides a much more direct means to bring out detail
in a given image area, but the color tool enables the
SAOImage/DS9-esque, click and drag method of adjusting the color map
directly.  Simply left-click and drag.  Moving down narrows the map, up
widens, left shifts it to lower color values, and right shifts it to
higher.  Right-clicking resets the color map.  If you find yourself
using this tool often, try out the histogram tool instead and see if you
prefer it.

The color tool's key shortcut if @kbd{c}.

@node Image Slicing Tool, Box Statistics Tool, Color Tool, CubeView Tools
@subsubsection Image Slicing Tool
@cindex Image Slicing Tool
@cindex Slicer Tool



@float Figure,fig:cv_slice
@center @image{images/cubeview_slice,5.617in,,CubeView Slice Window}
@caption{A plot of a slice through an image.}
@end float

The image slicing tool allows slices to be taken through any image at
arbitrary angles.  Just left-click and drag to define a slice, or
right-click and drag to define horizontal or vertical slices.  A plot
window with the pixel values along the slice vector is displayed, and
mousing over it highlights simultaneously the value and pixel position
within the image.  Turning the tool off or selecting another removes the
slice line, and click-dragging a new slice replaces the existing line.
An example slice plot is shown in @ref{fig:cv_slice}.

The image slicing tool's key shortcut is @kbd{l}.

@node Box Statistics Tool, Aperture Photometry Tool, Image Slicing Tool, CubeView Tools
@subsubsection Box Statistics Tool
@cindex Box Statistics Tool
@cindex Statistics, Image

@float Figure,fig:cv_stats
@center @image{images/cubeview_stats,4.332in,,CubeView Statistics Example}
@caption{Example CubeView statistics computed in the yellow box.}
@end float

The statistics tools extends the CubeView window, adding a panel of
statistics information at the bottom, including mininum/maximum,
average, median, standard deviations, and 3-sigma trimmed average and
standard deviation.  Simply create or modify a box region @pxref{Box
Regions} to view the statistics within that box.  The box region for the
statistics tool is yellow.  An example of the tool's output is show in
@ref{fig:cv_stats}.

The box statistics tool's key shortcut is @kbd{s}.


@node Aperture Photometry Tool, Cube Extraction Tool, Box Statistics Tool, CubeView Tools
@subsubsection Aperture Photometry Tool
@cindex Photometry, Aperture
@cindex Aperture Photometry Tool

@float Figure,fig:cv_phot
@center @image{images/cubeview_phot,4.332in,,CubeView Photometry Example}
@caption{Example CubeView aperture photometry, centered on the centroid
found in the box area.}
@end float

The aperture photometry tool performs simple circular aperture
photometry with a sky annulus.  It extends the CubeView window to report
the photometry results.  A box is drawn (blue, for this tool), and the
centroid of the source in the box is computed, and used to center two
circular apertures, source and sky.  If the @kbd{Centroid} option at
bottom is de-selected, the center of the box is used as the center of
the circular apertures instead.  The total flux inside the inner
circular aperture, minus the scaled sky flux (reported as the average
within the sky annulus) is given. An example of the tool's output is
show in @ref{fig:cv_phot}.

The aperture photometry tool's key shortcut is @kbd{p}.


@node Cube Extraction Tool, Pixel Backtracking Tool, Aperture Photometry Tool, CubeView Tools
@subsubsection Cube Extraction Tool

The cube extraction tool is used to extract spectra from rectangular
regions within a cube, and can only be used when a cube is being
displayed.  @xref{Box Regions} for more on defining and manipulating a
box region, which is magenta for this tool.  Once an extraction region
is defined, the spectrum is diplayed in the CubeSpec tool.
@xref{CubeSpec}.

The cube extraction tool's key shortcut is @kbd{x}.

@node Pixel Backtracking Tool, Bad Pixel Tool, Cube Extraction Tool, CubeView Tools
@subsubsection Pixel Backtracking Tool
@cindex Backtracking Tool
@cindex Pixel Backtracking

@float Figure,fig:cv_backtrack
@center @image{images/cubeview_backtrack,6in,,CubeView Backtrack Window}
@caption{The backtracking window of CubeView, showing contribution from
6 pixels among 2 BCD records to the cube pixel, one of which is flagged
as a bad pixel.}
@end float

The pixel backtracking tool is an advanced cube analysis and
verification tool.  It is enabled only when viewing a single plane of a
spectral cube.  For the pixel under the cursor, it displays a list of
input BCD pixel fragments which contributed to that pixel.  The more
pixel redundancy built into your map, the greater the number of records
and record pixels which contributed (also, high-res cubes typically have
more, since there is overlap among the multiple high-res orders).  The
information displayed includes the record ID, the pixel within that
record, the fractional contribution to the cube pixel, the value of the
BCD pixel (with uncertainty, if available), the value of the background,
and the difference, along with any pipeline or user set pixel flags (see
XXX).

Simply turn the tool on and mouse around.  The BCDs which contributed to
the given cube pixel are highlighted in the associated CUBISM Project
window.  Left-clicking freezes on an individual cube pixel, marking it
with a green @samp{x}, while right-clicking restores the free motion.
In the BackTracking window, right clicking on any individual list item
allows the associated BCD pixel to be set as a global or record-level
bad pixel (see XXX).  You can continue to navigate through the cube
while backtracking is active (see XXX).

The pixel backtracking tool's key shortcut is @kbd{t}.


@node Bad Pixel Tool, Pixel Table Tool, Pixel Backtracking Tool, CubeView Tools
@subsubsection Bad Pixel Tool
@cindex Bad Pixel Tool

@float Figure,fig:cv_badpix
@center @image{images/cubeview_badpix,4.332in,,CubeView Bad Pixel Display}
@caption{A record stack with bad pixels displayed.}
@end float

The bad pixel tools marks individual bad pixels, either user-flagged, or
pipeline-produced, and allows global and record-level user bad pixels to
be added or removed (see @ref{Bad Pixels}, for more information on
different types of user-level bad pixels, and tips on selecting them).
It is only available when BCD images are being displayed.  To use,
simply left-click to set or remove a given bad pixel from the global bad
pixel list, clicking and dragging to set or unset multiple pixels at
once.  Middle-click (or @key{Control}-left-click) instead to set to
record-level bad pixels.

A number of marks are drawn in CubeView to indicate global bad pixels,
record level bad pixels, and various conditions and flags from the
pipeline generated mask files @code{BMASK} and @code{PMASK}.  The
various symbols seen when the Bad Pixel Tool is enabled are:

@multitable @columnfractions .2 .8
@item Cyan @samp{x}s
@tab Global user-defined bad pixels, applying to all records.

@item Green @samp{x}s
@tab Record-level user bad pixels, applying only to a single record.

@item Blue @samp{+}s
@tab Locations where the @code{PMASK} (permanent mask) has any bit set.
The @code{PMASK} typically contains a small number of unruly pixels.

@item Red @samp{diamonds}s
@tab Non-fatal bits set in the @code{BMASK}.

@item Red @samp{x}s
@tab Fatal bits set in the @code{BMASK}.  These are bits 12, 13 and 14,
i.e. none or only one usable sample in the exposure ramp, or pixel
fatally flagged in the @code{PMASK}.

@end multitable

@noindent See the @uref{http://ssc.spitzer.caltech.edu/irs/dh/,IRS Data
Handbook} for a reference on the individual mask bits which the IRS
pipeline applies.  Note that despite being a fatal mask value, bit 8 in
the @code{BMASK} (not flat fielded) is not marked, since it occurs
everywhere off the orders.  All @code{BMASK} values, whether marked or
not, are indicated in the status display line @pxref{CubeView Status Display
Line}.

When viewing and setting bad pixels in CubeView, the right mouse button
can be used to cycle through 4 settings controlling which bad pixels are
indicated:

@enumerate
@item
All mask and user-set bad pixels marks.
@item
All mask and user-set bad pixels marks, except for non-fatal
@code{BMASK} marks.
@item
All fatal @code{BMASK} mask and user-set bad pixel marks.
@item
Only user-set bad pixel marks.
@end enumerate

@noindent @key{Shift}-right-click cycles in the opposite direction.

The bad pixel tool's key shortcut is @kbd{b}.


@node Pixel Table Tool, Order Mask Tool, Bad Pixel Tool, CubeView Tools
@subsubsection Pixel Table Tool
@cindex Pixel Table Tool

The pixel table tool can be activated at any time, and displays a group
of pixel values around the cursor position.

@node Order Mask Tool, Compass Rose Tool, Pixel Table Tool, CubeView Tools
@subsubsection Order Mask Tool
@cindex Order Mask Tool

The order mask tool sets to zero all pixels outside the order, as
defined by the @code{WAVSAMP} aperture @pxref{WAVSAMP}.  It is useful
when checking for bad pixels, and is only available when BCD record data
are displayed.

@node Compass Rose Tool,  , Order Mask Tool, CubeView Tools
@subsubsection Compass Rose Tool
@cindex Compass Rose Tool

The compass rose draws NE compass lines on images data with available
astrometry (cubes, maps, and visualization images).


@node CubeView Colorbar, CubeView Status Display Line, CubeView Tools, CubeView
@subsection Colorbar
@cindex Colorbar

The colorbar shows the currently selected colormap (as adjusted by
@kbd{Options->Colormap} menu, and the Color tool --- see @ref{Color
Tool}), along with a plot of the current color pixel histogram of the
displayed image region, and the scale clipping limits.  @xref{Histogram
Tool}.

@node CubeView Status Display Line, CubeView Image Info Block, CubeView Colorbar, CubeView
@subsection Status Display Line
@cindex Status Line, CubeView

Below the display window, a status display line reports the pixel
position and value (with uncertainty), and depending on the data being
viewed, either 

@enumerate
@item (BCD images, see, e.g., @ref{fig:cv_badpix}) Wavelength and order of the cursor position, along
with a flag code identifying the bad pixel type (see XXX, for
information on the flag codes).
@item (Cubes and Visualization Images, e.g. @ref{fig:cv_phot}) 
Coordinates of the current position from the WCS information.
@end enumerate

@node CubeView Image Info Block, CubeView WAVSamp Pane, CubeView Status Display Line, CubeView
@subsection Image Info Block

Information on the image being displayed is provided here, the same as
is shown in the title bar @pxref{CubeView Title Bar}.

@node CubeView WAVSamp Pane,  , CubeView Image Info Block, CubeView
@subsection WAVSamp Pane

Below the image info block, when a BCD record is being displayed, is the
@emph{WAVSamp Pane}, where the @code{WAVSAMP} @pxref{WAVSAMP} can be
manipulated.  @kbd{Show} overlays the current @code{WAVSAMP} for the
current build order, @kbd{Edit} adds handles which can be used to adjust
either side or end of the @code{WAVSAMP}.  The normalized aperture
coordinates of the 4 corners of the @code{WAVSAMP} are shown for each
order.  The @kbd{Lock} toggle controls whether all orders are set to the
same @code{WAVSAMP} aperture.  The @kbd{WvScl} toggle creates a
@code{WAVSAMP} aperture which grows linearly with wavelength.   The
@kbd{Reset} button reset the full aperture.

Editing the @code{WAVSAMP} involves clicking on one of the 6 adjustment
handles and dragging.  When in @kbd{WvScl} mode, only the central
controls adjust the width of the aperture, and the central wavelength.
Otherwise, all controls change the width, either at one end, or both
ends together.  @key{Shift}-click and drag moves both sides of the
aperture at once.

@xref{WAVSAMP} for more information about when and how to edit the
@code{WAVSAMP}.  See @ref{fig:cv_recs} for an example displayed
@code{WAVSAMP}.




@node CubeSpec,  , CubeView, The Tools
@section CubeSpec
@cindex CubeSpec
@cindex Spectra, Viewing

CubeSpec is the tool which permites viewing and manipulating extracted
spectra, and create maps from spectral cubes.



@node The Techniques, Tips and Troubleshooting, The Tools, Top
@chapter The Techniques


@menu
* Cube Assembly::               
* Cube Analysis::               
* Cube Validation::             
* Cookbook::                    
@end menu

@node Cube Assembly, Cube Analysis, The Techniques, The Techniques
@section Cube Assembly
@cindex Cube Assembly

@menu
* Input Files and Calibration::  Backgrounds:: Bad Pixels::
* Backgrounds::                 
* Bad Pixels::                  
@end menu


@node Input Files and Calibration, Backgrounds, Cube Assembly, Cube Assembly
@subsection Input Files and Calibration
@cindex @code{BCD} files
@cindex Calibration sets
@cindex Files, input
@cindex Input files

File naming convention.


@node Backgrounds, Bad Pixels, Input Files and Calibration, Cube Assembly
@subsection Backgrounds
@cindex Background subtraction

All IRS observations are affected at some level by the foreground or
background emission of zodiacal dust and Galactic cirrus.  For faint
sources, subtracting off a local ``sky background'' in the form of a 2D
BCD frame constructed from data obtained nearby in position and time is
the most effective method for removing the astrophysical background.  In
addition, BCD-level background subtraction also tremendously reduces the
number of bad or ``rogue'' pixels contaminating IRS data, especially in
the longer wavelength models, and effectively reduces residual
systematic uncertainties which dominate at low flux intensity (often in
the form of correlated patterns, bands, etc.).  2D level background
subtraction is a recommended step for all cubes.

Here we explore a variety of options for background subtraction, in
decreasing order of preference.

@callout{Subtracting a 2D background frame can greatly improve the
quality of the assembled cube, especially for faint sources.}

@menu
* In Situ Background::          
* Archive Background::          
* Background Blend::            
* 1D Sky Spectrum Background::  
* No Background::               
* Background Tips and Visualization::  
@end menu

@node In Situ Background, Archive Background, Backgrounds, Backgrounds
@subsubsection In Situ Background
@cindex Background, In Situ

The primary and recommended technique for assembling a background frame
is to use dedicated background observations you scheduled along with
your mapping AOR, or to use data obtained as part of your mapping
observations which went off the source.  For dedicated sky observations,
simply load the records (for example, with @kbd{Record->Import Data by
Module->BCD}), disable them, and @kbd{Background->Set Background from
Recs...}.  For backgrounds which appear among the mapping data set,
simply select these records and choose @kbd{Background->Set Background
from Recs...}.

Finding full records which are uncontaminated by source emission, either
within the spectral map itself, or as part of a dedicated background AOR
grouped with the main observations, is the goal.  This is aided in maps
using the low-resolution modules by the fact that each low-res slit (LL
and SL) is comprised of two sub-slits which define the different
spectral orders.  For small object, less than the size of one sub-slit,
it is common to map first with one sub-slit, and then with the other
(e.g. a SL1 map and, separately, a SL2 map).  In this case, the
``outrigger'' data from the data collected when the source was placed in
the other order can be used as a background set.  Even if the full slit
was used to map a source, the fact that the two orders extend away from
the map center to either side can allow useful background frames to be
found.


@node Archive Background, Background Blend, In Situ Background, Backgrounds
@subsubsection Archive Background
@cindex Background, Archive

If you didn't obtain dedicated sky observations, and none of the records
in your map are free from source emission, you can still recover 2D
level BCD maps by ``borrowing'' suitable data from the Spitzer archives.
Useful sky data would have been obtained with the same instrument
module, using (ideally) the same exposure time, targeted within roughly
10 degrees in ecliptic latitude from your source, and within 2--3 days
of the target observation.

The efficacy of archive sky subtraction can vary widely, and depends on
the level of the background at your source, and the historical behavior
of the IRS detectors at the time of your observations.  The closer in
time and ecliptic coordinate the data, the better the subtraction will
be (both in terms of removing the astrophysical foreground, and
mitigating the effects of rogue pixels).  The complete
@uref{http://ssc.spitzer.caltech.edu/approvdprog/sched/obs/alltogether.txt,log
of all Spitzer observations} can be useful for identifying potential
data sets which could contain useful background data.  Remember that you
must decide yourself whether a given BCD record constitutes a valid
background frame, i.e. is free from source emission.  For low resolution
data, often the safest bet is the ``outrigger'' order from a staring
mode observation (which often target unresolved sources) --- e.g. SL2
from a SL1 targetted observation.  The disadvantage of this technique is
that the data must be available in the archive, which for many program
requires waiting for the proprietary period to expire.

@node Background Blend, 1D Sky Spectrum Background, Archive Background, Backgrounds
@subsubsection Background Blend
@cindex Background, Blended

A related technique to the archive background is the ``Background
Blend'', useful if a set of observations from the archive which closely
match the background properties of your source cannot be identified.  In
this method, a pair of observations from the archive (or elsewhere)
which bracket the target background are linearly blended together to
approximate a local 2D background.  The same constraints on data of
exposure apply: ideally all background observations would have been
obtained within 2--3 days of the target observations, to maximize the
effectiveness of mitigating rogue pixels (the behavior of which drifts
on the timescale of days).

To use this method, load the two data background sets, ensuring their
records are disabled to avoid having them built into the cube.  Select
the subset of the first which you want to include in the background, and
select @kbd{Background->Background Blend->Set and Scale Background
A...}.  The selected background is displayed, with @samp{BackgroundA}
indicated in the image info block @pxref{CubeView Image Info Block}.
Enter a fiducial background value when prompted.  This value serves as
the interpolant for determining the weights of the two backgrounds in
the blend.  For SL data, it is convenient to use the flux measured in
the Peak-Up Blue image at 16 microns (the lower of the 2 peak-up fields
visible in all SL BCD iamges), if it is clear of source contamination.
The box statistics tool can be useful (e.g. use as a fiducial value the
3-sigma clipped average of a large section of the PU field).  Do the
same for @samp{BackroundB}, and then select @kbd{Background->Background
Blend->Blend A and B Backgrounds...}, entering a fiducial of your target
data set, formed in the same way (e.g. in from the PU field statistics).
Another potentially useful fiducial is the predicted background at the
source position and date, as available in Spot.


@node 1D Sky Spectrum Background, No Background, Background Blend, Backgrounds
@subsubsection 1D Sky Spectrum
@cindex Sky, 1D Spectrum

If no 2D BCD-level data are available for subtraction, some of the same
benefits can be obtained by specifying a 1D spectrum to subtract from
all the cube planes.  You can build a raw, non-fluxed cube, extract a
spectrum from an area believed to be free from source contamination, and
use this extracted spectrum as a 1D level background.

@callout{Note that 1D background spectra must be in raw, @samp{e/s} units, extracted from cubes built without FLUXCON.}

This method does @emph{not} help mitigate rogue pixels, and is
essentially equivalent to extracting spectra and differencing them after
the fact, but operates on the entire cube at once.

@node No Background, Background Tips and Visualization, 1D Sky Spectrum Background, Backgrounds
@subsubsection No Background

Using no background is a reasonable last resort option for brighter
sources, though the number of bad pixels in the raw unsubtracted data is
much higher, so more work will be required to identify them (see XXX).
The physical background flux will also of course remain in the final
assembled cube, which may affect analysis of extracted spectra or maps.

@node Background Tips and Visualization,  , No Background, Backgrounds
@subsubsection Background Tips and Visualization

It can be convenient to select suitable records for inclusion in the
background frame by using the AOR visualization of an IRAC or MIPS (or
other zodiacal and/or cirrus sensitive waveband) image of the target
region.  Here we describe how to use the ``outrigger'' method to select
suitable records from a set of low-resolution observations in the SL
module (LL would be similar).

@enumerate
@item
Load all the relevant SL (SL1+SL2) frames, which may span more than one
AOR.  Using @kbd{Import AOR} will permit selecting more than one AOR at
once.  Don't mix data taken more than a few days apart, to minimize the
effects of day-to-day changes in the pixel response of the detectors.
@item
Visualize the AORs using, e.g., an 8 micron IRAC image (see XXX).  After
using the histogram box to scale the image such that low-level diffuse
emission is apparent, hit @kbd{v} to switch to visualize mode.  To
define sky BCDs for, e.g., SL1, for example, set the cube build order to
1 (@kbd{Cube->Set Cube Build Order}), and see which records land off
your target.  Highlight these outriggers with the mouse by click and
drag.
@item
For reference, save the resulting record set into a @file{.bgl} file
using @kbd{Background->Save Background Recs...}.
@end enumerate

@node Bad Pixels,  , Backgrounds, Cube Assembly
@subsection Bad Pixels
@cindex Bad Pixels
@cindex Rogue pixels



@menu
* Selecting/Defining Bad Pixels::  
@end menu

@node Selecting/Defining Bad Pixels,  , Bad Pixels, Bad Pixels
@subsubsection Selecting/Defining Bad Pixels

Bad pixels can be identified in CUBISM either 'manually' or in an
automatic fashion.  The procedure for automatically identifying bad
pixels is described in Section XX.

@enumerate
@item
 View the stack of relevant @code{BCDs}.
@item
 Show the wavsamp.
@item
 Click @samp{BGSub} (if available) to remove many bad pixels using the
 sky background data previously defined.
@item
 Enlarge the stack viewer to the largest possible perspective.
@item
 Show the current (cyan) bad pixel mask.
@item
 Set the scaling stretch to show just the very brightest pixels.
@item
 Mark ~ >4 sigma deviations, but ensure you are not marking line data!
@item
 Reset the scaling to show the next brightest set of pixels.
@item
 Mark ~ >4 sigma deviations.
@item
 Iterate this process until you can clearly see emisison lines, to the
point where the viewable pixels are no longer >4 sigma deviations.
@item
Save the bad pixel mask.
@item
Build the cube with this mask.
@item
Inspect each wavelength plane for weird, out-of-place columns/rows.
@item
Use the backtrack tool to note any additional pixels to be masked.
@item
Finally, extract a 1d spectrum and look for spikes that aren't lines.
@end enumerate


@node  Cube Analysis, Cube Validation, Cube Assembly, The Techniques
@section Cube Analysis
@cindex Cube Analysis

@subsection Extracting 1D Spectra

Extracting 1D spectra from the cube, and building 2D line, continuum, or
feature maps are straightforward using the CUBISM interface.  After the
cube has been built, and all bad pixels have been identified, make sure to
save your cube project file (again).  To generate a 1D spectrum, you must
first identify the spatial region over which the spectrum is to be
averaged.  This can be done in one of two ways.  You can either read in a
region file (actually the region is read from the headers of a saved ``tbl"
spectrum file) from a previous analysis session (created, for example, from
a different IRS module used to map the same target), or you can use the
``Extract Spectra and Stack Cubes" tool to define a new region with the
mouse.  We will discuss each of these in turn.

In order to use a saved region file, simply go to the ``File" menu
pulldown, and select ``Extract Region from File...".  This will then pop up
a menu from which you can select your region file.  Once this is done, the
spatial region will be displayed on your current cube in the CubeView
window, and a spectrum will automatically appear in a new CubeSpec window.
This spectrum is the average spectrum over the region in your current cube,
defined by the save region file you have selected.  The name of this file
appears at the top of the CubeSpec window.  The new spectrum can now be
saved by using the ``File" menu pulldown in the CubeSpec window, and
selecting ``Save Spectrum As...", and entering a filename (tbl file) at the
prompt.  This is a common practice, for example, if you are examining a
Short-Low second order (SL2) cube, and want to extract a spatial region
defined on your Short-Low first order (SL1) cube so that the SL1 and SL2
spectra cover the same spatial region on your science target.  This can
also be used to extract Long-Low spectra using a region defined in the SL1
or SL2 cubes, thus obtaining a complete spectrum over a singe,
psuedo-aperture in the map.  Since Spitzer is diffraction-limited beyond
about $6\mu$m, and the IRS modules have different pixel scales, users
should be very careful here to avoid defining critically-samples regions at
the shortest wavelengths, then using these to extract spectra from maps
with significantly larger beam sizes.  This may result in long-wavelength
spectra generated over areas smaller than the beam.  If you read in a
region that is larger than your current cube, and you attempt to extract a
spectrum over this region, CUBISM will produce a pop-up warning message.
In this case, the problem will be obvious, as the extraction aperture will
extend beyond the edges of your cube in the CubeView window.  You can still
generate the spectrum and save it to disk, but you should probably select a
smaller aperture if you are attempting to compare or stitch spectra across
IRS modules.

In order to extract a 1D spectrum from the cube over a new region, go to
the Tools pulldown menu and choose ``Extract Spectra and Stack Cubes" (or
simply click on the Extract Spectra icon in the menu bar of the CubeView
window (the 7th button from the left).  Once this is active, a rectangular
region will appear on the cube, which you can drag (by holding down the
left mouse button inside the region) or expand (by holding down the left
mouse button on the lower right corner of the region), and a spectrum will
appear in the CubeSpec window.  If the CubeSpec window was already open,
the spectrum will change to reflect your newly-defined region, and the area
(in pixels) is displayed at the top of the CubeSpec window.  If the
CubeSpec window was not open, it will pop up and display your new 1D
spectrum.  When you move or resize the region, the spectrum (which is an
average over that area) will change.  The 1D spectrum can be saved to a tbl
file on disk at any time.  This is an excellent way to quickly see how the
IRS spectrum of your source changes with position over the cube.  Any tbl
file that you save in this step, can also be used to set the region for
another cube which you make later (as described above).

@subsection Creating 2D Maps

Just the cube can be used to generate 1D spectra over any extraction
region, so too can the 1D spectra be used to create 2D images (slices of
the cube) over any specified wavelength interval.  Once a 1D spectrum is
visible in the CubeSpec window, change the selection from ``Full Cube" to
``Map".  Once ``Map" is selected, the button in the middle of the window
will become active.  This button provides a single choice of ``continuum"
or ``peak", allowing the user to define the continuum or peak regions in
the spectrum for generation of the map.  If you wish to say, create a
continuum-subtracted $11.3\mu$m PAH map from a SL1 cube, you can first use
the mouse to define the continuum on either side of the PAH feature by
selecting ``Continuum" and clicking (with the left button) two pairs of
spectral regions on either side of the emission feature.  The continuum
regions will turn red after selection.  You can have any number of
continuum regions of any arbitrary size in wavelength.

Once the continuum regions are defined, change the selection to ``Peak",
and select the emission feature with the mouse in the same way.  If making
an emission-line map, select at least three or more pixels around the peak
of the line.  Once the peak region is selected, it will turn (a lighter
shade of) red, and the image in the CubeView window will change.  This is
now the continuum-subtracted map of your science target.  Cubism has taken
the average of the two continuum points, and subtracted this value from the
line emission at every point in the cube.  To save this map, simply go to
the ``File" pulldown menu, and select ``Save Map as FITS".  The FITS file
saved in this manner has all the required header keywords to be read into
the common FITS readers (e.g. DS9), displayed, and aligned with any other
FITS image of your science target.  Using the CubeSpec window, any number
of spectral regions can be defined and used to make FITS images, which can
then be saved in the CubeView window.

Note that the CubeSpec window can also be used to measure simple line
parameters before or after the line map is made.  By selecting the ``Fit"
button, a polynomial fit, as defined by the ``Fit Order" button, will be
performed between the continuum points, and the basic parameters (e.g. line
equivalent width, line flux, average continuum flux density, etc.), will be
displayed in the box in the upper right of the CubeSpec menu.  By clicking
on the ``Reset Plot" button, all the continuum and peak selections will be
erased, and new spectral regions, and their corresponding spectral maps,
can be defined.

Besides user-defined maps, Cubism has a number of pre-defined filter curves
available under the ``Maps" pulldown menu in the CubeSpec window.  This will 
allow you to generate spectral maps in, for example, any the IRAC-5.8, IRAC-8,
MIPS-24, IRS Peakup, ISOCAM LW2 or LW3 filters.  Once selected, the spectral
ranges will be highlighted on the 1D spectrum in the CubeSpec window, and the 
image in the CubeView window will change to the corresponding 2D map.  Note, 
these maps are pseudo filter images, and are not continuum-subtracted.

@node  Cube Validation, Cookbook, Cube Analysis, The Techniques
@section Cube Validation
@cindex Cube Validation

A description of backtracking and other means of validating and
improving the cube, and checking on weak features, etc.

@node Cookbook,  , Cube Validation, The Techniques
@section Cookbook
@cindex Cookbook

NOTE: This info will likely be re-organized and scattered around the
previous sections.

@center The 10 Steps To Build A Spectral Cube 
@enumerate
@item
Admit that you have a cube.  Prepare yourself.  We tend to chose a 20+
year old whisky, preferably Speyside.
@item
We assume that you have already followed the Quick Start Guide and
started CUBISM with the following command.
@example
IDL> cubism
@end example
@item 
If this is your first start of CUBISM, you will have a menu window
asking you to @kbd{Load Cube Project...}.  In that case, you can open an
old cube project (ending in .cpj) or press the bottom button @kbd{Create
New Cube Project}.  For a new project, you must first name the project.
A @kbd{New Project Name} window pops up and this is where you type its
name.  Click @kbd{OK} when you are done.
@item
Click on the @kbd{Record} menu tab.  Highlight then click the
@kbd{Load Record Uncertainties}.  After this, the @kbd{Record}
menu closes.  Open it again and you will see a square next to
@kbd{Load Record Uncertainties}.
@item
With the @kbd{Record} menu tab still open, click on @kbd{Import
Data by Module}.  This brings up another window.  You want to click
@kbd{BCD...}.  This brings up yet another window entitled
@kbd{Select BCD AOR Directory}.  You just need to highlight the top
directory where the data are.  Since you can only load one type of data
in one project, you can highlight the r###### directory that you get
when unzipping data from the SSC.  If you do not know which r######
directory has which data, highlight the next directory down on the
directory tree (with / being the base of the directory tree).  Click
@kbd{OK} and CUBISM will bring up another window entitled
@kbd{Load Group}. Click on the square next to the data that you want.
The window tells you what object, module (SL, LL, SH, LH), and how many
files for each module.  Click @kbd{OK} when you are ready.

@item
Click on the @kbd{Cube} menu tab.  There are several points under this
menu that need to be checked (producing a square like that for @kbd{Load
Record Uncertainties} in Step 4).  Check the following: @kbd{Build Cube
with FLUXCON}, @kbd{Build in MJy/sr}, @kbd{Build Cube with SLCF},
@kbd{Trim Wavelengths}, and @kbd{Build Cube Uncertainties} (you will not
be able to highlight this unless you clicked on @kbd{Load Record
Uncertainties} earlier).  There is also @kbd{Subtract Background} that
needs to be checked if you are getting rid of the background.  That is
your preference.  This text will not be clickable until you have set the
background records.

@item
Now, time to set the background records.  You will have to add the
background spectra using the @kbd{Record} menu tab and clicking
@kbd{Import Data by Module} and then @kbd{BCD} (just like before).
In the main cube project window, highlight the file names that are for
the background.  Once the file names are highlighted, click on the
@kbd{Background} menu tab.  Under this menu, click on @kbd{Set
Background from Rec(s)...}.  A window will appear with either one
option, if you only have 2 background files, or two options.  The two
options to choose are @kbd{Average} (for both 2 or greater number of
files) and @kbd{Average + Min/Max Trim} (for only greater than 2
background files).  Now, under the @kbd{Cube} menu tab, you can now
highlight and then click @kbd{Subtract Background}.

@item
It is time to build your cube.  Go into the @kbd{Cube} menu tab and
click on @kbd{Build Cube}.  A new window producing multicolored
rectangles will appear.  Then, the white grid will become bold when each
``pixel'' is generated.  Congratulations!  You have a cube.

@item
Now, you can start deleting bad pixels or have the program do it for
you.  It all depends on how much time that you want to spend on the
cube.  I will not tell you how to delete bad pixels.  That is saved for
another section.  For those wishing to have CUBISM do it, click on the
@kbd{Bad Pixel} menu tab and then click on @kbd{Auto-Gen Global
Bad Pixels...}.  You can also click on @kbd{Auto-Gen Record Bad
Pixels...}, but this option is not discussed here.  After hitting the
Global button, a new window pops up.  First, unclick the @kbd{UNC}
button.  Second, if you have subtracted a background, click the
@kbd{BG} button to account for the background use.  The default sigma
and fraction that come up are very good.  Click @kbd{OK}.  We cannot
give you default numbers of bad pixels that will be produced by the
program.  It depends on when your observations were taken, if you used
background subtraction, and the parameters for the Auto-Gen.

@item
Finally, rebuild your cube.  The Auto-Gen Bad Pixel program will always
leave a few bad pixels.  So, you will have to subtract a few.  If the
program doesn't leave a few, then you have probably deleted some of your
science.  @strong{BE FOREWARNED!}  However, you can now view the cube,
extract spectra, and save them as .tbl files.  Enjoy your new life with
a spectral cube!
@end enumerate

@center GOTCHA!!! --- Things That Will Waste Your Time When You Do Them
Here, we present a list of things to remember, especially if you just
resave your first project (using @kbd{Save As...} under the
@kbd{File} menu tab).
@enumerate
@item
If you just resave a project, like SL1 and then use it for SL2, then remember to 
change the @kbd{Set Cube Build Order...} under the @kbd{Cube} menu tab.  
@item
If you just resave a project, like SH and then use it for LH, then
remember to erase all your previous bad pixels.  These bad pixel numbers
are saved in each project.  Use @kbd{Clear All Bad Pixels} under the
@kbd{BadPix} menu tab.
@item
If you resave a project, you will NOT have to change the background
files, for SL1 to SL2.  However, you WILL have to clear the background
records if you switch from SH to LH.  Use @kbd{Remove Background}
under the @kbd{Background} menu tab.
@item
SAVE OFTEN!!!  You can also save your bad pixel and background records
in separate files from your project (.cpj) file.  These are typically
.bpl (for bad pixels) and .bgl (for backgrounds).  You can then load
these files into a new project file and save yourself time, if you are
breaking a large Project into several smaller project files.
@sp 1
OR what could happen is that you get drunk and type 'rm -f *.cpj' in the
directory where you are working.  All that work lost, but before you
throw yourself from the building, just load up the science files again
and then load up the .bpl and .bgl files.  NOTE: The background science
files have to be loaded prior to loading the .bgl file.
@item 
When SSC moves onto S14, S15, etc., they change the last number in the
science fits files.  Thus, your project files will not be portable
@sp 1
NNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOO!!!!!!!!!!!!!!!!!
@sp 1 
But wait!  Go to the @kbd{Edit} menu tab and click on @kbd{Select
All}.  Then, under the @kbd{Edit} menu tab, there is the great button
called @kbd{Replace File Subtring}.  This brings up, essentially, the
Find and Replace window from Windows.  Just type in _1_ in the Find
line.  Then, type _2_ in the Replace line.  Click @kbd{OK}.  Thus,
all your old work is saved.
@item
If you get an error message about missing a calibration file and so
using something older, don't panic.  It's fine but you probably need an
update of your CUBISM, or you need to wait for the SSC to come up with a
newer calibration file.
@item
If CUBISM ever freezes, close everything and restart.  Before redoing
the error, click on @kbd{Debug Cubism} under the @kbd{Info} menu
tab.  Then, redo the error.  Send the "barf" that occured in your IDL
window to the appropriate authorities.  That will help the Help Desk
more than anything and speed up their response.
@item
If you want to View your cube and visualize your AORs, then you want to
use the (new viewer) commands of the same name (e.g., View Cube (new
viewer)...).  These (new viewer) commands are found under the
@kbd{Record} menu tab and @kbd{Cube} menu tab.  Hitting these
buttons will save you the frustration of seeing what you want disappear.
This is not so bad for viewing a cube but it will save you a few moments
when you are visualizing an AOR.
@item
If you can think of any more, you are smarter than us.  
@end enumerate


@c
@c Troubleshooting
@c

@node Tips and Troubleshooting, Index, The Techniques, Top
@chapter Tips and Troubleshooting
@cindex Troubleshooting

You may occassionally encounter problems with CUBISM.  Here we document
standard issues which are commonly encountered, and provide tips on
debugging CUBISM and providing useful feedback to the SSC.

@menu
* Debugging CUBISM::            
@end menu

@node Debugging CUBISM,  , Tips and Troubleshooting, Tips and Troubleshooting
@section Debugging CUBISM
@cindex Debugging CUBISM

By default, CUBISM traps and reports all errors which occur.  The
resulting error message may or may not allow you to determine the cause
of the error.  To debug CUBISM yourself, or to provide useful
information to the SSC helpdesk to allow them to investigate the
problem, enable debugging with @kbd{Info->Debug Cubism} in the CUBISM
Project window.  This requires access to the IDL command line, which
will not be available for versions of CUBISM running under the IDLVM
@pxref{Binary Installation}.  After enabling debugging, repeat the
action which generated the error.  Instead of trapping the error with a
prompt, IDL will halt, with a full traceback message showing the exact
code path which led to the error.  This code path might be enough to
give you a hint as to the nature of the problem, but is also useful for
the upstream maintainers for debugging purposes.  

Report problems to @url{mailto:help@spitzer.caltech.edu,the SSC Help
Desk}, including, at minimum:

@enumerate
@item A brief statement of the problem.
@item A detailed description of the steps which can lead to the problem.
@item Example inputs which trigger the problem, if applicable.
@item The full traceback message reported after you have enabled
Debugging.
@end enumerate



@c
@c Appendices
@c

@c @node CubeProject Reference, CubeView Reference, The Techniques, Top
@c @appendix CubeProject Reference
@c @cindex CubeProject

@c A detailed listing of all CubeProject menus etc.

@c @node CubeView Reference, CubeSpec Reference, CubeProject Reference, Top
@c @appendix CubeView Reference
@c @cindex CubeView

@c A detailed listing of all CubeView tools, menus etc.

@c @node CubeSpec Reference, Index, CubeView Reference, Top
@c @appendix CubeSpec Reference
@c @cindex CubeSpec

@c A detailed listing of all CubeSpec, menus etc.

@node Index,  , Tips and Troubleshooting, Top
@unnumbered Index
@printindex cp

@bye
