\input texinfo @c -*-texinfo-*-
@c %**start of header
@setfilename idlwave
@settitle CUBISM User Manual
@dircategory CUBISM
@direntry
* CUBISM: (cubism).	IDL-based tool for Spitzer IRS Spectral Map Reduction
@end direntry
@set EDITION 1.0
@set VERSION 1.13
@set IDLVERSIONREQUIRED 6.1
@set DATE June, 2006
@set AUTHOR J.D. Smith
@set AUTHOREMAIL jdsmith@@as.arizona.edu
@set CUBISMHOMEPAGE http://sings.stsci.edu/cubism

@macro callout {text}
@quotation
@cartouche
@strong{\text\ }
@end cartouche
@end quotation
@end macro

@macro screenshot {label,name,text,size,caption}
@float Figure, fig:\label\
@center @image{images/\name\,\size\,,\text\}
@caption{\caption\}
@end float
@end macro


@c %**end of header
@finalout

@ifinfo 
This file documents CUBISM, an IDL program for reducing and analyzing
IRS Spectral Maps.

This is edition @value{EDITION} of the @cite{CUBISM User Manual} for
CUBISM @value{VERSION}

Copyright @copyright{} 2006 J.D. Smith

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover texts being ``A GNU Manual'',
and with the Back-Cover Texts as in (a) below.  A copy of the license is
included in the section entitled ``GNU Free Documentation License'' in
the Emacs manual.

(a) The FSF's Back-Cover Text is: ``You have freedom to copy and modify
this GNU Manual, like GNU software.  Copies published by the Free
Software Foundation raise funds for GNU development.''

This document is part of a collection distributed under the GNU Free
Documentation License.  If you want to distribute this document
separately from the collection, you can do so by adding a copy of the
license to the document, as described in section 6 of the license.
@end ifinfo

@c
@c Title Page
@c

@titlepage
@title CUBISM User Manual
@subtitle IRS Spectral Map Analysis and Reduction
@subtitle Edition @value{EDITION}, @value{DATE}

@sp 4
@center @image{images/logo2,,,Cubism Logo}

@author by J.D. Smith and the SINGS team
@page

This is edition @value{EDITION} of the @cite{CUBISM User Manual} for
CUBISM version @value{VERSION}, @value{DATE}.
@sp 2

@cindex Copyright, of CUBISM
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover texts being ``A GNU
Manual'', and with the Back-Cover Texts as in (a) below.  A copy of the
license is included in the section entitled ``GNU Free Documentation
License'' in the Emacs manual.

(a) The FSF's Back-Cover Text is: ``You have freedom to copy and modify
this GNU Manual, like GNU software.  Copies published by the Free
Software Foundation raise funds for GNU development.''

This document is part of a collection distributed under the GNU Free
Documentation License.  If you want to distribute this document
separately from the collection, you can do so by adding a copy of the
license to the document, as described in section 6 of the license.
@end titlepage

@contents

@page

@ifnottex

@node Top, Introduction, (dir), (dir)

CUBISM is a package written in the Interactive Data Language (IDL),
which supports the analaysis and reduction of spectral maps created with
the @uref{http://ssc.spitzer.caltech.edu/irs/,IRS Spectrograph} aboard
the @uref{http://ssc.spitzer.caltech.edu/,Spitzer Space Telescope}.

@end ifnottex

@c menu

@menu
* Introduction::                
* Installation::                
* Quick Start Guide::           
* The Tools::                   
* The Techniques::              
* Index::                       

@detailmenu
 --- The Detailed Node Listing ---

Installation

* Source Installation::         
* Binary Installation::         
* Setup::                       
* Upgrading::                   

The Tools

* CUBISM Project::              
* CubeView::                    
* CubeSpec::                    

CUBISM Project

* Data Records::                
* Menus::                       
* Button Bar::                  

Menus

* File Menu::                   
* Edit Menu::                   
* Record Menu::                 
* Cube Menu::                   
* Background Menu::             
* BadPix Menu::                 
* Info Menu::                   

The Techniques

* Cube Assembly::               
* Cube Analysis::               
* Cube Validation::             
* Cookbook::                    

Cube Assembly

* Input Files and Calibration::  Backgrounds:: Bad Pixels::
* Backgrounds::                 
* Bad Pixels::                  

Backgrounds

* In Situ Background::          
* Archive Background::          
* 1D Sky Spectrum Background::  
* No Background::               
* Background Tips and Visualization::  

Bad Pixels

* Selecting/Defining Bad Pixels::  

@end detailmenu
@end menu

@c=====================================
@c============= Chapters
@c=====================================


@c
@c Introduction
@c

@node Introduction, Installation, Top, Top
@chapter Introduction
@cindex Introduction

CUBISM is a package written in the Interactive Data Language (IDL),
which supports the analaysis and reduction of spectral maps created with
the @uref{http://ssc.spitzer.caltech.edu/irs/,IRS Spectrograph} aboard
the @uref{http://ssc.spitzer.caltech.edu/,Spitzer Space Telescope}.
CUBISM is designed to allow sets of basic calibrated data (@code{BCDs}) from
IRS mapping observations to be combined into single 3D spectral cubes,
with two spatial and one spectral dimension.  From these cubes, spectra
can be extracted over differing apertures, and arbitrary maps can be
made in spectral features (e.g. a line image).  

CUBISM consists of three main components, which together form the core
of its analysis and reduction capabilities:

@multitable @columnfractions .2 .8

@item CUBISM Project
@tab Manage @code{BCD} data, and track all the various information required to
build cubes, including calibration data, background information, bad
pixels, aperture information, etc.

@item CubeView
@tab General purpose viewer with a variety of tools for interacting with
2D spectral images, full spectral cubes, and visualization overlay FITS
images.

@item CubeSpec
@tab View and manipulate extracted spectra, and create maps from
spectral cubes.
@end multitable

@noindent CUBISM is not a general purpose spectral analysis tool.  What
analysis tools it offers are oriented directly towards the task of
creating, validating, and dissecting spectral cubes.  Since individual
spectra, spectral maps, and full spectral cubes can be output from a
single cube project, other tools can easily be used for higher order
analysis of these products (e.g. multiple Gaussian fitting, etc.).

This manual is organized as follows.  After discussing the installation
and requirements of CUBISM in @ref{Installation}, we give a quick start
guide to building a spectral cube from a mapping data set in @ref{Quick
Start Guide}.  We then cover in detail the menu options and capabilities
of the three main tools which comprise CUBISM.  Then we discuss in
greater depth the steps required to build a cube in @ref{Cube Assembly},
explain methods of analyzing the cube in @ref{Cube Analysis}, and cover
validating and improving cubes in @ref{Cube Validation}.

Note that this manual does not include information on planning IRS
spectral mapping observations; see the
@uref{http://ssc.spitzer.caltech.edu/irs/documents/specmap_bop/, IRS
Spectral Map HOWTO} for information on observation planning.


@c
@c Installation
@c

@node Installation, Quick Start Guide, Introduction, Top
@chapter Installation
@cindex Installation

CUBISM runs under IDL, and requires a working version of IDL to
function.  There are two means of installing CUBISM: as a set of source
@file{.pro} files which IDL finds on its search path, or as a
pre-compiled binary, which can be loaded as a single entity.  Both
versions can be found on @uref{@value{CUBISMHOMEPAGE}, the CUBISM home
page}.

The advantages of a source installation are:

@itemize @bullet
@item
Access to CUBISM's code for bug fixing or examining algorithms.
@item
Source level feedback when bugs occur (see XXX).
@item
Should continue to function with all future versions of IDL.
@end itemize

@noindent The disadvantages of the source installation are:

@itemize @bullet
@item
Must install the @code{AstroLib} dependency library, at the required
version.  Some (small) risk of future changes in @code{AstroLib} causing
problems.
@item
Subject to routine name conflicts (e.g. two routines named
@file{routine.pro} on the path), so you must carefully set your
@code{IDL_PATH} to be sure CUBISM's files are found first.  This should
not be a common problem, but earlier distributions of SMART did have
some conflicting file names.
@end itemize

@noindent The advantages of installing and running a binary version of CUBISM:

@itemize @bullet
@item
All required routines are included in the compiled file at the required
version; no need to install external libraries.
@item
No routine name conflicts should occur.
@item 
Can be used with the freely available @emph{IDL VM}, if you don't have
access to an IDL license.
@end itemize


@noindent and the disadvantages:

@itemize @bullet
@item
No access to source code level debugging feedback when errors occur,
making it harder to track down problems.
@item
More closely tied to the IDL version; a given binary may not work with
all future versions of IDL (though typically binary compatibility
between IDL versions within a few versions is quite good).
@end itemize

@menu
* Source Installation::         
* Binary Installation::         
* Setup::                       
* Upgrading::                   
@end menu

@node Source Installation, Binary Installation, Installation, Installation
@section Source Installation
@cindex, Installation, from source

The requirements for installing and running CUBISM from source are:

@enumerate
@item
A Linux/Solaris/Unix or MacOSX platform.  CUBISM may run under Windows,
but has not been tested there.
@item
A licensed copy of IDL at version @value{IDLVERSIONREQUIRED} or later.
Download @uref{http://rsinc.com/idl/,from RSI}.
@item
The @code{AstroLib} library, available from
@uref{http://idlastro.gsfc.nasa.gov/, NASA Goddard}.  Be sure to include
it on your @code{IDL_PATH}.
@item
A compiler for C source, typically @code{gcc}, or whatever the IDL
routine @code{MAKE_DLL} looks for.
@end enumerate

The compiler is required to auto-compile a small piece of C code used to
speed-up the main cube building algorithm.  If this compilation fails,
an IDL version of this algorithm will be used, which gives the same
results, but operates more slowly.

To install CUBISM from source:

@enumerate
@item
Unpack the @file{cubism_vX.XX.tgz} file (where @file{X.XX} is the
version number) in a directory on the IDL path (e.g. @file{~/idl}).
@item
Ensure the @file{irs_cubism} directory which is unpacked is on the
@code{IDL_PATH}, e.g. by:

@code{setenv IDL_PATH <IDL_DEFAULT>:+$HOME/idl}

@end enumerate

@noindent System-wide installation is also possible: just install CUBISM
in a location accessible by your entire group.

@node Binary Installation, Setup, Source Installation, Installation
@section Binary Installation
@cindex, Installation, binary

The requirements for CUBISM running as a binary:

@enumerate
@item
A Linux/Solaris/Unix or MacOSX platform.  CUBISM may run under Windows,
but has not been tested there.
@item
A copy of IDL at version @value{IDLVERSIONREQUIRED} or later.  This can
either be a fully licensed copy, or the @emph{IDL VM}, the freely
available virtual machine.  Download either
@uref{http://rsinc.com/idl/,from RSI}.
@item
A compiler for C source, typically @code{gcc}, or whatever the IDL
routine @code{MAKE_DLL} looks for.
@end enumerate

Note that running CUBISM as a binary under the free @emph{IDL VM} does
not give you access to an IDL command line, so that only the graphical
interface to CUBISM is accessible.  With this setup, no analysis can be
performed at the command line, though all files, including spectra,
maps, and cubes can be output as normal.  Running the binary
distribution of CUBISM in a licensed version of IDL does not prevent
access to the command line.

@node Setup, Upgrading, Binary Installation, Installation
@section Setup
@cindex Setting CUBISM Up

CUBISM needs very little setup.  As long as the binary or source file
structure is left intact, CUBISM auto-discovers all the necessary
calibration and other files it needs.  One basic setup issue relates to
the color mode.  By default, IDL uses @emph{DECOMPOSED} color, in which
the RBG value of pixels is directly specified, whereas CUBISM (and most
astronomy software) relies on color table indices to specify color.  To
switch modes, try adding the following to the file you specify with
environment variable @code{IDL_STARTUP}:

@example
device,DECOMPOSED=0,TRUE_COLOR=24,RETAIN=2
@end example

@noindent You may not need the @code{RETAIN=2} setting depending on your window
manager (this forces IDL to keep track of the contents of windows when
they need to be redrawn, and is typically required under Linux).

Another potential issue relates to the @code{IDL_PATH}.  If you have a
source distribution of CUBISM, you will need to ensure that the
directories containing CUBISM are on your @code{IDL_PATH}.
Occasionally, two different packages will each define the same routine
in two files with the same names (a so-called @emph{name space
conflict}).  If you encounter this problem, move the CUBISM directories
higher on your @code{IDL_PATH}, or use the binary distribution, which
doesn't suffer name space conflicts.


@node Upgrading,  , Setup, Installation
@section Upgrading
@cindex Upgrading

Upgrading CUBISM is as simple as replacing the source or binary
installation directories and restarting IDL.  You can always find out
what version of CUBISM you are running with the menu @kbd{Info->About
Cubism} in the project window.

@c
@c Quick Start Guide   
@c

@node Quick Start Guide, The Tools, Installation, Top
@chapter Quick Start Guide
@cindex Quick Start

CUBISM has two major themes: building cubes from IRS Spectral Mapping
data sets, and analyzing those cubes.  Building cubes from collections
of mapping data sets is in principle a simple process: the correct @code{BCDs}
are collected together in a project, the cube build parameters are
adjusted, and the cube is built.  With the assembled cube, you can then
perform a variety of post-cube analysis including extracting spectra in
specific regions and building spectral maps.  There are many details
which can affect the cube assembly process, and impact the quality of
the final assembled product.  Here we will quickly go through the basic
steps required to build a cube, extract a spectrum, and build a spectral
map, leaving all of the (important) details aside for now.

An important note before we begin concerns the scope of a CUBISM
project.  Each CUBISM project pertains to a single order of a single IRS
module, e.g. LL1.  For data sets with mapping observations in all four
low-resolution orders, 4 individual cubes will likely be built, and
analzyed together.

To get going, type:

@example
IDL> cubism
@end example

@noindent and create a new cube, giving it a useful name when prompted.
Add a full set of mapping data with the @kbd{Add Data} button.  Just
navigate to a directory and click @kbd{OK}, and CUBISM will search for
all data files at or beneath that directory.  After selecting the
directory, CUBISM will group all discovered files by object and mapping
AOR, and allow you to select among them.  When prompted, choose the set
of data you are interested in, and they will be loaded into the project.
If you are warned that no calibration set has been loaded, and that the
latest is being used, simply acknowledge the warning.

Choose @kbd{Edit->Select All} and then @kbd{Record->View Record
Stack...} to popup a viewer displaying a stack of all the records.
Click @samp{WAVSAMP: Edit} and drag the aperture so that it lies fully
within the illuminated order, trimming perhaps 1 or 2 pixels from the
order ends (where the flat-field is problematic).  Back in the main
CubeProject window, choose @kbd{Cube->Build Cube}, and watch the build
progress.  When the cube is complete, hit the @kbd{View Cube} button to
display the cube in the same viewer window.  In this window, click on
the @kbd{Extract} button (a cube with a line through it), or select
@kbd{Tools->Extract Spectra and Stack Cubes}.  Click and drag a
rectangular extraction region, from upper left to lower right, on the
cube, and CubeSpec will popup showing you the extracted spectrum.  In
CubeSpec, click @kbd{Map} and then choose @samp{Region: Peak}.  Click
once at a low and high wavelength to define a peak region, and you've
just created a spectral map, which should now be displayed in CubeSpec.

Congratulations, you've just gone quickly through the most important
steps of cube assembly and analysis.  Read on to learn more about
building higher quality cubes, and more sophisticated methods of
analysis.

@c
@c The Tools
@c

@node The Tools, The Techniques, Quick Start Guide, Top
@chapter The Tools
@cindex Cubism Tools

Cubism consists of three main components, which are used together for
building and analyzing spectral cubes: CUBISM Project, CubeView, and
CubeSpec.  We will give here a description of the purpose and reference
of the features of each of these three tools.

@c For a complete reference on the
@c capabilities and features of each tool, see the appropriate Appendix:
@c @ref{CubeProject Reference}, @ref{CubeView Reference}, @ref{CubeSpec
@c Reference}.


@menu
* CUBISM Project::              
* CubeView::                    
* CubeSpec::                    
@end menu

@node CUBISM Project, CubeView, The Tools, The Tools
@section CUBISM Project
@cindex Project, CUBISM
@cindex CUBISM Project

The CUBISM Project is the central storehouse of all information relating
to a single spectral cube.  This is where the raw spectral data are
collected, the calibration parameters are loaded and managed,
preferences are set, the cube is assembled, and outputs are saved.  

@callout{A single CUBISM project contains information for only one
spectral cube, corresponding to a single IRS module and order.}

@noindent This includes sub-slits for single IRS modules, e.g. SL1 and SL2 would
be two separate cubes.  There is a separate project window for each open
cube. For information on how to extract spectra from matched areas in
multiple overlapping cubes, see XXX.

CUBISM projects, with all their associated meta-data, can be saved to
and recovered from disk, with the default file extension @file{.cpj}
(for ``Cubism Project'').  In a sense, the ``project'' is the
fundamental file type of CUBISM, and can be manipulated in a similar way
as a ``document'' in other applications (Open/Close/Save/Revert/etc.).
You can have as many CUBISM projects open at once as your memory will
allow (though all ancillary other windows associated with a given
project can quickly overwhelm your screen).

Any given CUBISM project can be read from and saved to disk, manipulated
from the command line, or interacted with via the GUI interface.  Here
is an example CUBISM Project window, populated with a mapping data set:

@screenshot{pop_proj,populated_project,Populated Cubism Project, 6in, CUBISM
Project Main Window}

@menu
* Data Records::                
* Menus::                       
* Button Bar::                  
@end menu

@node Data Records, Menus, CUBISM Project, CUBISM Project
@subsection Data Records
@cindex Data Records
@cindex @code{BCD} Records
@cindex Record Information

A CUBISM projects holds all of the data records (often called simply
@emph{BCDs}) necessary for building a given cube, either including the
data directly, or a reference to the data on file (which it loads on
demand).  In @ref{fig:pop_proj}, four records have been selected.  A
variety of information is shown for each record:

@multitable @columnfractions .15 .85

@item @code{ID}
@tab A (hopefully) unique ID formed from filename.

@item @code{Exp}
@tab The @code{BCD} exposure time in seconds (from the headers).

@item @code{Observed}
@tab The date and time the @code{BCD} observation (GMT).
@item @code{Added}
@tab The date and time this data record was added to the project (local
time zone).

@item @code{Type}
@tab The type of the record, encoded as @samp{tMMO_pos}, with

@itemize @bullet
@item @samp{t}: The type of data record -- @samp{d} for @samp{DROOPRES},
@samp{c} for @samp{COADD}, @samp{f} for @samp{FLATAP}, or blank for the
(by far most common) @code{BCD}.  For information on these other flavors
of pipeline-produced IRS data see
@uref{http://ssc.spitzer.caltech.edu/irs/dh/,the IRS Data Handbook}.

@item @samp{M}: The module -- @samp{SL}, @samp{SH}, @samp{LL}, or @samp{LH}.

@item @samp{O}: The targeted order -- @samp{1}, @samp{2}, or blank, for
high-res or full-slit low-res (e.g. @samp{LLBoth}) targeting.

@item @samp{pos}: The position within the slit which was targeted --
@samp{cen}: the slit center, @samp{a}: nod position 1, @samp{b}: nod
position 2).  @samp{b}: nod position 2.
@end itemize

@item @code{Step}
@tab The step sequence within the map as @samp{I[X,Y]}, where @samp{I}
is the @samp{EXPID} of this step, and @samp{X} and @samp{Y} are the row
and column positions within the map.

@end multitable

@noindent A secondary page of information is available by clicking on the
right angle button at the extreme right edge of the header bar.  This
page includes:

@multitable @columnfractions .15 .85

@item @code{RA}
@tab RA targetted by the slit field of view position (J2000).

@item @code{DEC}
@tab DEC targetted by the slit field of view position (J2000).

@item @code{DATA}
@tab Whether the data for this record are loaded, rather than just a
link to the file.  Data are loaded on demand.

@item @code{UNC}
@tab Whether the associated uncertainty data for this record are
loaded.  These are discovered automatically alongside the primary data
products and loaded..

@item @code{BMSK}
@tab Whether the associated @code{BMASK} mask data for this record are
loaded.  The @code{BMASKs} are discovered automatically alongside the
primary data products and loaded.

@item @code{ACCT}
@tab Whether the ``accounting information'' for this record is cached,
mapping @code{BCD} pixels to sky pixels.

@item @code{BPL}
@tab Whether any record level bad pixels exist for this record
@pxref{Bad Pixels}.

@end multitable

Note that reference to the term @code{BCD} is inclusive of the other,
less commonly used files types (@samp{FLATAP}, @samp{DROOPRES}).  The
records can be sorted by any of the available data fields by clicking
the button associated with each header word, e.g. to sort by RA, click
@samp{RA}.


@c
@c CUBISM Project Menus
@c


@node Menus, Button Bar, Data Records, CUBISM Project
@subsection Menus
@cindex Project Window Menus
@cindex Menus, Project Window

Most of the options for assembling and saving information from the cube
are available from the menus of CUBISM Project, which are documented
here in order of their appearance.

@menu
* File Menu::                   
* Edit Menu::                   
* Record Menu::                 
* Cube Menu::                   
* Background Menu::             
* BadPix Menu::                 
* Info Menu::                   
@end menu

@node File Menu, Edit Menu, Menus, Menus
@subsubsection File Menu
@cindex File Menu

@table @code
@item New...
Create a new CUBISM project, prompting for the name.

@item Open...
Open an existing CUBISM project.

@item Save Setup

@table @code
@item Save Data with Project
Save all record data with the project (which can greatly increase the
project size on disk).

@item Save Clip Accounts with Project
Save all clipping information, which enables pixel backtracking, and
rapid cube rebuilds, with the project.  This will increase the project
size on disk.
@end table

@item Save
Save the project, prompting for a file to save to if not already set.

@item Save As...
Save the project as an alternate file.

@item Revert to Saved...
Recover the last saved version of the project from disk, discarding
current changes.

@item Write FITS Cube...
Write out the assembled cube (if any) as a FITS cube, along with an
associated uncertainty cube (if built).

@item Rename Project...
Rename the project (which doesn't affect the file to which the project
is saved).

@item Export to Command Line...
Export the full CUBISM Project object to the IDL command line, prompting
for the variable name.

@item Load New Calibration Set...
Load an alternate calibration set.

@item Close
Close the project window, prompting to save if changes have been made.

@end table

@node Edit Menu, Record Menu, File Menu, Menus
@subsubsection Edit Menu
@cindex Edit Menu

@table @code
@item Select All
Select all the records.

@item Select By Filename
Select records with files matching a given expression.

@item Select By Keyword
Select records with keyword matching a given expression.

@item Invert Selection
Select an non-selected records, and de-select all selected records.

@item Deselect Disabled
Deselect any selected record which is disabled.

@item Replace File Substring...
Replace a given substring in the file names of the selected records with
another string.

@end table


@node Record Menu, Cube Menu, Edit Menu, Menus
@subsubsection Record Menu
@cindex Record Menu

@table @code
@item Add Data...

@item Import Data from Mapping AOR
Import data from entire mapping AORs, selecting among the AORs present
at or below the selected directory.

@table @code
@item BCD...
Import BCD data (flat-fielded and straylight-corrected).

@item DroopRes...
Import DroopRes data (not flat-fielded, not straylight-corrected).

@item FlatAp...
Import FlatAp data (flat-fielded, not straylight-corrected).

@end table

@item Import Data by module
Import all records found at or below the selected directory, grouped by
module (independent of any AOR).

@table @code
@item BCD...
Import BCD data (flat-fielded and straylight-corrected).

@item DroopRes...
Import DroopRes data (not flat-fielded, not straylight-corrected).

@item FlatAp...
Import FlatAp data (flat-fielded, not straylight-corrected).

@end table

@item Load Record Masks
Load the BMASKs associated with any newly added records.

@item Load Record Uncertainties
Load the BCD uncertainty files for any newly added records.

@item Switch Record Data Type...
Prompt for and wwitch the data type of the selected records among BCD,
FlatAp, and DroopRes.

@item Restore All Record Data
Recover from file the data for all records (these are normally recovered
on demand).

@item View Record/View Stack...
View the selected record, or an average stack of records if more than
one is selected, using a pre-existing viewer window if available.  Note
that double-clicking a record or hitting @key{RETURN} on a selected
record has the same effect.

@item View Record (new viewer)/View Stack (new viewer)...
View the selected record, or an average stack of records if more than
one is selected, using a new viewer window.

@item View Uncertainty...
View the associated uncertainty image of the selected record, or the
quadrature sum of uncertainties if more than one is selected, using a
pre-existing record viewer window if available.

@item View Uncertainty (new viewer)...
View the associated uncertainty image of the selected record, or the
quadrature sum of uncertainties if more than one is selected, using a
new viewer window.

@item Delete
Delete the selected record(s) from the project.

@item Rename
Change the ID of the first select record.

@item Disable
Disable the selected record(s), preventing them from being built in the
cube.

@item Enable
Enable the selected record(s), allowing them to be built in the cube.

@item Show Filenames...
Show the filenames associated with the selected record(s).

@item Show Header...
Show the header(s) of the selected record(s).

@item Show Keyword Value(s)...
Show the value(s) of a selected FITS header keyword for the selected
record(s).

@item Visualize AORs...
Load a FITS image and visualize the mapping AORs on it, using a
pre-existing visualization viewer window if available.

@item Visualize AORs (new viewer)...
Load a FITS image and visualize the mapping AORs on it in a new viewer
window.

@item Load New Visualization Image...
Load an alternate image for visualizing AORs.

@end table


@node Cube Menu, Background Menu, Record Menu, Menus
@subsubsection Cube Menu
@cindex Cube Menu

@table @code
@item Build Cube
Build the cube from the enable records.

@item Reset Accounts
Reset the clipping accounts (which speed cube re-build and enable pixel
backtracking).

@item View Cube...
View the cube in a pre-existing cube viewer window, if available.

@item View Cube (new viewer)...
View the cube in a new viewer window.

@item Show Cube Build Feedback
If enabled, plot cube build feedback while the cube builds.

@item Build Cube with FLUXCON
Build the cube using flux calibration.

@item Build Cube with SLCF
Apply the slit loss correction function to the assembled cube, to
correct for differential diffractive slit losses for extended sources.

@item Subtract Background
Subtract the set background from each record when building the cube.

@item Trim Wavelengths
Trim the unreliable ends of the orders, omitting those wavelength planes
from the cube.

@item Use Reconstructed Positions
Use positions reconstructed from the spacecraft telemetry, rather than
the commanded positions.

@item Build Uncertainty Cube
Build an associated uncertainty cube, if record-level uncertainties are
available.


@item Set Cube Build Order...
Set the cube build order.

@item Aperture(s)...
Show the WAVSAMP apertures used for the various orders.

@end table



@node Background Menu, BadPix Menu, Cube Menu, Menus
@subsubsection Background Menu
@cindex Background Menu

@table @code
@item Set Background from Rec(s)...
Set the record-level background from the selected records, prompting for
an average of trimmed-average combination.

@item Load Background Rec(s)...
Load a saved list of background records to use from a @file{.bgl} file.

@item Background Blend
@table @code
@item Set and Scale Background A...
Set the first background in a blend from the selected records,
specifying its fiducial point.

@item Set and Scale Background B...
Set the second background in a blend from the selected records,
specifying its fiducial point.

@item Blend A and B Backgrounds...
Create a final background by blending backgrounds A and B according to
weights calculated from a target fiducial value.

@item View Background A...
View the first blend background, and select the records associated with it.

@item View Background B...
View the second blend background, and select the records associated with it.
@end table

@item Save Background Rec(s)...
Save the list of backgrounds records used as a @file{.bgl} file.

@item View Background...
View the record background, if any, in a pre-existing record viewer
window, if available.

@item View Background (new viewer)...
View the record background, if any, in a new record menu.

@item Remove Background
Remove the assembled background.

@item Rebuild Background
Recreate background from its associated record data.

@item Load Background Spectrum...
Load a 1D background spectrum from an extracted @file{.tbl} file.

@item Remove Background Spectrum
Remove any loaded 1D background spectrum.

@end table

@node BadPix Menu, Info Menu, Background Menu, Menus
@subsubsection BadPix Menu
@cindex BadPix Menu

@table @code
@item Load Bad Pixels...
Load a saved list of bad pixels from a @file{.bpl} file, replacing any
existing bad pixels already set.

@item Load and Append Bad Pixels...
Load a saved list of bad pixels from a @file{.bpl} file, appending to
any existing bad pixels already set.

@item Save Bad Pixels...
Save the list of global and record-level bad pixels to a @file{.bpl}
text file.

@item Clear Global Bad Pixels
Clear all global bad pixels.

@item Clear Record Bad Pixels
Clear all record-specific bad pixels.

@item Clear All Bad Pixels
Clear all global and record-level bad pixels.

@item Auto-Gen Global Bad Pixels...
Attempt to automatically generate global bad pixels from redundant
information in well sampled cubes, prompting for detection parameters.

@item Auto-Gen Record Bad Pixels...
Attempt to automatically generate record-level bad pixels for all
records, prompting for detection parameters.

@end table


@node Info Menu,  , BadPix Menu, Menus
@subsubsection Info Menu
@cindex Info Menu

@table @code
@item Project Parameters...
Display the currently configured project parameters.

@item As-Built Parameters...
Display the project parameters at the time the most recent cube was
assembled.

@item Calibration Set Details...
Show the details of the currently loaded calibration set.

@item Debug Cubism
Enable CUBISM debugging, so that errors will halt at the command line
with full traceback information.

@item About Cubism
Show the current CUBISM version, and the version which was used to
assemble the loaded project (if different).

@end table

@node Button Bar,  , Menus, CUBISM Project
@subsection Button Bar
@cindex Project Window Buttons
@cindex Buttons, Project Window

The button bar at the base of the CUBISM Project window provides
convenient access to common functions, also available with menu options
or mouse shortcuts.

@table @code
@item Enable
Enable the selected record(s).

@item Disable
Disable the selected record(s).

@item Header
Show the header(s) for the selected record(s).

@item View Record/View Stack
View the selected record, or an average stack of the selected records,
if more than one selected.

@item View Cube
View the assembled cube, if available.

@item Import AOR
Import BCD records from full mapping AORs found at or beneath the
selected directory.

@item Save
Save the current project, prompting for a file if not yet set.

@item Close
Close the current project, prompting to save any unsaved changes.

@end table


@node CubeView, CubeSpec, CUBISM Project, The Tools
@section CubeView
@cindex CubeView
@cindex Viewing Cubes
@cindex Viewing Maps


View and manipulate extracted spectra, and create maps from spectral
cubes.



@node CubeSpec,  , CubeView, The Tools
@section CubeSpec
@cindex CubeSpec
@cindex Spectra, Viewing

CubeSpec is the tool which permites viewing and manipulating extracted
spectra, and create maps from spectral cubes.



@node The Techniques, Index, The Tools, Top
@chapter The Techniques


@menu
* Cube Assembly::               
* Cube Analysis::               
* Cube Validation::             
* Cookbook::                    
@end menu

@node Cube Assembly, Cube Analysis, The Techniques, The Techniques
@section Cube Assembly
@cindex Cube Assembly

@menu
* Input Files and Calibration::  Backgrounds:: Bad Pixels::
* Backgrounds::                 
* Bad Pixels::                  
@end menu


@node Input Files and Calibration, Backgrounds, Cube Assembly, Cube Assembly
@subsection Input Files and Calibration
@cindex @code{BCD} files
@cindex Calibration sets
@cindex Files, input
@cindex Input files

File naming convention.


@node Backgrounds, Bad Pixels, Input Files and Calibration, Cube Assembly
@subsection Backgrounds
@cindex Background subtraction

All IRS observations are affected at some level by the foreground or
background emission of zodiacal dust and Galactic cirrus.  For faint
sources, subtracting off a local ``sky background'' 2D BCD frame from
data obtained nearby in position and time is the most effective method
for removing the astrophysical background.  It also tremendously reduces
the number of bad ``rogue'' pixels contaminating your data, especially
at longer wavelengths, and is a recommended step for all cubes.  Here we
explore a variety of options for background subtraction, in decreasing
order of preference.

@callout{Subtracting a 2D background frame can greatly improve the
quality of the assembled cube, especially for faint sources.}

@menu
* In Situ Background::          
* Archive Background::          
* 1D Sky Spectrum Background::  
* No Background::               
* Background Tips and Visualization::  
@end menu

@node In Situ Background, Archive Background, Backgrounds, Backgrounds
@subsubsection In Situ Background
@cindex Background, In Situ

The primary and recommended technique for assembling a background frame
is to use dedicated background observations you scheduled along with
your mapping AOR, or to use data obtained as part of your mapping
observations which went off the source.  For dedicated sky observations,
simply load the records (for example, with @kbd{Record->Import Data by
Module->BCD}), disable them, and @kbd{Background->Set Background from
Recs...}.  For backgrounds which appear among the mapping data set,
simply select these records and choose @kbd{Background->Set Background
from Recs...}.

Finding full records which are uncontaminated by source emission, either
within the spectral map itself, or as part of a dedicated background AOR
grouped with the main observations, is the goal.  This is aided in maps
using the low-resolution modules by the fact that each low-res slit (LL
and SL) is comprised of two sub-slits which define the different
spectral orders.  For small object, less than the size of one sub-slit,
it is common to map first with one sub-slit, and then with the other
(e.g. a SL1 map and, separately, a SL2 map).  In this case, the
``outrigger'' data from the data collected when the source was placed in
the other order can be used as a background set.  Even if the full slit
was used to map a source, the fact that the two orders extend away from
the map center to either side can allow useful background frames to be
found.


@node Archive Background, 1D Sky Spectrum Background, In Situ Background, Backgrounds
@subsubsection Archive Background
@cindex Background, Archive

If you didn't obtain dedicated sky observations, and none of the records
in your map are free from source emission, you can still recover 2D
level BCD maps by ``borrowing'' suitable data from the Spitzer archives.
Useful sky data would have been obtained with the same instrument
module, using (ideally) the same exposure time, targeted within roughly
10 degrees in ecliptic latitude from your source, and within 2-3 days.

The efficacy of archive sky subtraction can vary widely, and depends on
the level of the background at your source, and the historical behavior
of the IRS detectors at the time of your observations.  The closer in
time and ecliptic coordinate the data, the better the subtraction will
be (both in terms of removing the astrophysical foreground, and
mitigating the effects of rogue pixels).  The complete
@uref{http://ssc.spitzer.caltech.edu/approvdprog/sched/obs/alltogether.txt,log
of all Spitzer observations} can be useful for identifying potential
data sets which could contain useful background data.  Remember that you
must decide yourself whether a given BCD record constitutes a valid
background frame, i.e. is free from source emission.  For low resolution
data, often the safest bet is the ``outrigger'' order from a staring
mode observation (which often target unresolved sources) --- e.g. SL2
from a SL1 targetted observation.  The disadvantage of this technique is
that the data must be available in the archive.

A related technique is the ``Background Blend'', in which a pair of
observations from the archive (or elsewhere) which bracket the
background as observed at the target are blended together to approximate
a local background.  To use this, load the two data sets, ensuring their
records are disabled to avoid having them built into the cube.  Select
the subset of the first which you want to include in the background, and
select @code{Background->Background Blend->Set and Scale Background
A...}.  The selected background is displayed, with @samp{BackgroundA}
indicated.  Enter a fiducial background value when prompted.  This value
serves as the interpolant for determining the weights of the two
backgrounds in the blend.  For SL data, it is convenient to use the flux
measured in the Peak-Up Blue image at 16 microns, if it is clear of
source contamination.  The box statistics tool can be useful (e.g. use
the 3-sigma clipped average of a large section of the PU field).  Do
similarly for @samp{BackroundB}, and then select
@code{Background->Background Blend->Blend A and B Backgrounds...},
entering a fiducial of your target data set, formed in the same way
(e.g. in the PU field).  Another potentially useful fiducial is the
predicted background at the source position and date, as available in
Spot.


@node 1D Sky Spectrum Background, No Background, Archive Background, Backgrounds
@subsubsection 1D Sky Spectrum
@cindex Sky, 1D Spectrum

If no 2D data are available for subtraction, some of the benefits can be
obtained by specifying a 1D spectrum to subtract from all the cube
planes.  You could build a cube, extract a spectrum from an area thought
to be free from source contamination, and use this extracted spectrum as
a 1D level background.  

@callout{Note that 1D background data must be in raw, e/s units,
extracted from cubes built without FLUXCON.}

This method does not help mitigate rogue pixels, and is equivalent to
extracting spectra and differencing them after the fact, but operates on
the entire cube at once.

@node No Background, Background Tips and Visualization, 1D Sky Spectrum Background, Backgrounds
@subsubsection No Background

Using no background is a reasonable last resort option for brighter
sources, though the number of bad pixels in the raw unsubtracted data is
much higher, so more work will be required to identify them (see XXX).
The physical background flux will remain in the final assembled cube,
which may affect analysis of extracted spectra or maps.

@node Background Tips and Visualization,  , No Background, Backgrounds
@subsubsection Background Tips and Visualization

It can be convenient to select suitable records for inclusion in the
background frame using the AOR visualization of an IRAC or MIPS (or
other zodiacal and/or cirrus sensitive waveband) image of the target
region.  Here we describe how to use the ``outrigger'' method to select
suitable records from a set of low-resolution observations in the SL
module (LL would be similar).

@enumerate
@item
Load all the relevant SL (SL1+SL2) frames, which may span more than one
AOR.  Using @kbd{Import AOR} will permit selecting more than one AOR at
once.  Don't mix data taken more than a few days apart, to minimize the
effects of day-to-day changes in the pixel response of the detectors.
@item
Visualize the AORs using, e.g., an 8 micron IRAC image (see XXX).  After
using the histogram box to scale the image such that low-level diffuse
emission is apparent, hit @kbd{v} to switch to visualize mode.  To
define sky BCDs for, e.g., SL1, for example, set the cube build order to
1 (@kbd{Cube->Set Cube Build Order}) so that SL1 is not on the bright
target source, and see which records land off your target.  Highlight
these outriggers with the mouse by click and drag.
@item
For reference, save the resulting record set into a @file{.bgl} file
using @kbd{Background->Save Background Recs...}.
@end enumerate

@node Bad Pixels,  , Backgrounds, Cube Assembly
@subsection Bad Pixels
@cindex Bad Pixels
@cindex Rogue pixels

An exposition on selecting manual and automatic bad pixels.  Bad pixels
are bad.  Bad pixels, bad.

A number of marks are drawn in CubeView to indicate global bad pixels,
record level bad pixels, and various conditions and flags from the
pipeline generated mask files @code{BMASK} and @code{PMASK}.  The
various symbols seen when in @samp{Mark Bad Pixel} mode are:


@multitable @columnfractions .2 .8
@item Cyan @samp{x}s
@tab Global user-defined bad pixels, applying to all records.

@item Green @samp{x}s
@tab Record-level user bad pixels, applying only to a single record.

@item Blue @samp{+}s
@tab Locations where the @code{PMASK} (permanent mask) has any bit set.
The @code{PMASK} typically contains a small number of unruly pixels.

@item Red @samp{diamonds}s
@tab Non-fatal bits set in the @code{BMASK}.

@item Red @samp{x}s
@tab Fatal bits set in the @code{BMASK}.  These are bits 12, 13 and 14,
i.e. none or only one usable sample in the exposure ramp, or pixel
fatally flagged in the @code{PMASK}.

@end multitable

@noindent See the @uref{http://ssc.spitzer.caltech.edu/irs/dh/,IRS Data
Handbook} for a reference on the individual mask bits which the IRS
pipeline applies.  Note that despite being a fatal mask value, bit 8 in
the @code{BMASK} (not flat fielded) is not marked, since it occurs
everywhere off the orders.  All @code{BMASK} values, whether marked or
not, are indicated in the status display line.


When viewing and setting bad pixels in CubeView, @kbd{Mouse-3} can be
used to cycle through 4 settings controlling which bad pixels are
indicated:

@enumerate
@item
All mask and user-set bad pixels marks.
@item
All mask and user-set bad pixels marks, except for non-fatal
@code{BMASK} marks.
@item
All fatal @code{BMASK} mask and user-set bad pixel marks.
@item
Only user-set bad pixel marks.
@end enumerate

@noindent @kbd{Shift-Mouse-3} cycles in the opposite direction.


@menu
* Selecting/Defining Bad Pixels::  
@end menu

@node Selecting/Defining Bad Pixels,  , Bad Pixels, Bad Pixels
@subsubsection Selecting/Defining Bad Pixels

Bad pixels can be identified in CUBISM either 'manually' or in an
automatic fashion.  The procedure for automatically identifying bad
pixels is described in Section XX.

@enumerate
@item
 View the stack of relevant @code{BCDs}.
@item
 Show the wavsamp.
@item
 Click @samp{BGSub} (if available) to remove many bad pixels using the
 sky background data previously defined.
@item
 Enlarge the stack viewer to the largest possible perspective.
@item
 Show the current (cyan) bad pixel mask.
@item
 Set the scaling stretch to show just the very brightest pixels.
@item
 Mark ~ >4 sigma deviations, but ensure you are not marking line data!
@item
 Reset the scaling to show the next brightest set of pixels.
@item
 Mark ~ >4 sigma deviations.
@item
 Iterate this process until you can clearly see emisison lines, to the
point where the viewable pixels are no longer >4 sigma deviations.
@item
Save the bad pixel mask.
@item
Build the cube with this mask.
@item
Inspect each wavelength plane for weird, out-of-place columns/rows.
@item
Use the backtrack tool to note any additional pixels to be masked.
@item
Finally, extract a 1d spectrum and look for spikes that aren't lines.
@end enumerate


@node  Cube Analysis, Cube Validation, Cube Assembly, The Techniques
@section Cube Analysis
@cindex Cube Analysis

A description of cube extraction, map making, map sets, line fitting,
etc.


@node  Cube Validation, Cookbook, Cube Analysis, The Techniques
@section Cube Validation
@cindex Cube Validation

A description of backtracking and other means of validating and
improving the cube, and checking on weak features, etc.

@node Cookbook,  , Cube Validation, The Techniques
@section Cookbook
@cindex Cookbook

NOTE: This info will likely be re-organized and scattered around the
previous sections.

@center The 10 Steps To Build A Spectral Cube 
@enumerate
@item
Admit that you have a cube.  Prepare yourself.  We tend to chose a 20+
year old whisky, preferably Speyside.
@item
We assume that you have already followed the Quick Start Guide and
started CUBISM with the following command.
@example
IDL> cubism
@end example
@item 
If this is your first start of CUBISM, you will have a menu window
asking you to @kbd{Load Cube Project...}.  In that case, you can open an
old cube project (ending in .cpj) or press the bottom button @kbd{Create
New Cube Project}.  For a new project, you must first name the project.
A @kbd{New Project Name} window pops up and this is where you type its
name.  Click @kbd{OK} when you are done.
@item
Click on the @kbd{Record} menu tab.  Highlight then click the
@kbd{Load Record Uncertainties}.  After this, the @kbd{Record}
menu closes.  Open it again and you will see a square next to
@kbd{Load Record Uncertainties}.
@item
With the @kbd{Record} menu tab still open, click on @kbd{Import
Data by Module}.  This brings up another window.  You want to click
@kbd{BCD...}.  This brings up yet another window entitled
@kbd{Select BCD AOR Directory}.  You just need to highlight the top
directory where the data are.  Since you can only load one type of data
in one project, you can highlight the r###### directory that you get
when unzipping data from the SSC.  If you do not know which r######
directory has which data, highlight the next directory down on the
directory tree (with / being the base of the directory tree).  Click
@kbd{OK} and CUBISM will bring up another window entitled
@kbd{Load Group}. Click on the square next to the data that you want.
The window tells you what object, module (SL, LL, SH, LH), and how many
files for each module.  Click @kbd{OK} when you are ready.

@item
Click on the @kbd{Cube} menu tab.  There are several points under this
menu that need to be checked (producing a square like that for @kbd{Load
Record Uncertainties} in Step 4).  Check the following: @kbd{Build Cube
with FLUXCON}, @kbd{Build in MJy/sr}, @kbd{Build Cube with SLCF},
@kbd{Trim Wavelengths}, and @kbd{Build Cube Uncertainties} (you will not
be able to highlight this unless you clicked on @kbd{Load Record
Uncertainties} earlier).  There is also @kbd{Subtract Background} that
needs to be checked if you are getting rid of the background.  That is
your preference.  This text will not be clickable until you have set the
background records.

@item
Now, time to set the background records.  You will have to add the
background spectra using the @kbd{Record} menu tab and clicking
@kbd{Import Data by Module} and then @kbd{BCD} (just like before).
In the main cube project window, highlight the file names that are for
the background.  Once the file names are highlighted, click on the
@kbd{Background} menu tab.  Under this menu, click on @kbd{Set
Background from Rec(s)...}.  A window will appear with either one
option, if you only have 2 background files, or two options.  The two
options to choose are @kbd{Average} (for both 2 or greater number of
files) and @kbd{Average + Min/Max Trim} (for only greater than 2
background files).  Now, under the @kbd{Cube} menu tab, you can now
highlight and then click @kbd{Subtract Background}.

@item
It is time to build your cube.  Go into the @kbd{Cube} menu tab and
click on @kbd{Build Cube}.  A new window producing multicolored
rectangles will appear.  Then, the white grid will become bold when each
``pixel'' is generated.  Congratulations!  You have a cube.

@item
Now, you can start deleting bad pixels or have the program do it for
you.  It all depends on how much time that you want to spend on the
cube.  I will not tell you how to delete bad pixels.  That is saved for
another section.  For those wishing to have CUBISM do it, click on the
@kbd{Bad Pixel} menu tab and then click on @kbd{Auto-Gen Global
Bad Pixels...}.  You can also click on @kbd{Auto-Gen Record Bad
Pixels...}, but this option is not discussed here.  After hitting the
Global button, a new window pops up.  First, unclick the @kbd{UNC}
button.  Second, if you have subtracted a background, click the
@kbd{BG} button to account for the background use.  The default sigma
and fraction that come up are very good.  Click @kbd{OK}.  We cannot
give you default numbers of bad pixels that will be produced by the
program.  It depends on when your observations were taken, if you used
background subtraction, and the parameters for the Auto-Gen.

@item
Finally, rebuild your cube.  The Auto-Gen Bad Pixel program will always
leave a few bad pixels.  So, you will have to subtract a few.  If the
program doesn't leave a few, then you have probably deleted some of your
science.  @strong{BE FOREWARNED!}  However, you can now view the cube,
extract spectra, and save them as .tbl files.  Enjoy your new life with
a spectral cube!
@end enumerate

@center GOTCHA!!! --- Things That Will Waste Your Time When You Do Them
Here, we present a list of things to remember, especially if you just
resave your first project (using @kbd{Save As...} under the
@kbd{File} menu tab).
@enumerate
@item
If you just resave a project, like SL1 and then use it for SL2, then remember to 
change the @kbd{Set Cube Build Order...} under the @kbd{Cube} menu tab.  
@item
If you just resave a project, like SH and then use it for LH, then
remember to erase all your previous bad pixels.  These bad pixel numbers
are saved in each project.  Use @kbd{Clear All Bad Pixels} under the
@kbd{BadPix} menu tab.
@item
If you resave a project, you will NOT have to change the background
files, for SL1 to SL2.  However, you WILL have to clear the background
records if you switch from SH to LH.  Use @kbd{Remove Background}
under the @kbd{Background} menu tab.
@item
SAVE OFTEN!!!  You can also save your bad pixel and background records
in separate files from your project (.cpj) file.  These are typically
.bpl (for bad pixels) and .bgl (for backgrounds).  You can then load
these files into a new project file and save yourself time, if you are
breaking a large Project into several smaller project files.
@sp 1
OR what could happen is that you get drunk and type 'rm -f *.cpj' in the
directory where you are working.  All that work lost, but before you
throw yourself from the building, just load up the science files again
and then load up the .bpl and .bgl files.  NOTE: The background science
files have to be loaded prior to loading the .bgl file.
@item 
When SSC moves onto S14, S15, etc., they change the last number in the
science fits files.  Thus, your project files will not be portable
@sp 1
NNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOO!!!!!!!!!!!!!!!!!
@sp 1 
But wait!  Go to the @kbd{Edit} menu tab and click on @kbd{Select
All}.  Then, under the @kbd{Edit} menu tab, there is the great button
called @kbd{Replace File Subtring}.  This brings up, essentially, the
Find and Replace window from Windows.  Just type in _1_ in the Find
line.  Then, type _2_ in the Replace line.  Click @kbd{OK}.  Thus,
all your old work is saved.
@item
If you get an error message about missing a calibration file and so
using something older, don't panic.  It's fine but you probably need an
update of your CUBISM, or you need to wait for the SSC to come up with a
newer calibration file.
@item
If CUBISM ever freezes, close everything and restart.  Before redoing
the error, click on @kbd{Debug Cubism} under the @kbd{Info} menu
tab.  Then, redo the error.  Send the "barf" that occured in your IDL
window to the appropriate authorities.  That will help the Help Desk
more than anything and speed up their response.
@item
If you want to View your cube and visualize your AORs, then you want to
use the (new viewer) commands of the same name (e.g., View Cube (new
viewer)...).  These (new viewer) commands are found under the
@kbd{Record} menu tab and @kbd{Cube} menu tab.  Hitting these
buttons will save you the frustration of seeing what you want disappear.
This is not so bad for viewing a cube but it will save you a few moments
when you are visualizing an AOR.
@item
If you can think of any more, you are smarter than us.  
@end enumerate

@c
@c Appendices
@c

@c @node CubeProject Reference, CubeView Reference, The Techniques, Top
@c @appendix CubeProject Reference
@c @cindex CubeProject

@c A detailed listing of all CubeProject menus etc.

@c @node CubeView Reference, CubeSpec Reference, CubeProject Reference, Top
@c @appendix CubeView Reference
@c @cindex CubeView

@c A detailed listing of all CubeView tools, menus etc.

@c @node CubeSpec Reference, Index, CubeView Reference, Top
@c @appendix CubeSpec Reference
@c @cindex CubeSpec

@c A detailed listing of all CubeSpec, menus etc.

@node Index,  , The Techniques, Top
@unnumbered Index
@printindex cp

@bye
