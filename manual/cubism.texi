\input texinfo @c -*-texinfo-*-
@c %**start of header
@setfilename idlwave
@settitle CUBISM User Manual
@dircategory CUBISM
@direntry
* CUBISM: (cubism).	IDL-based tool for Spitzer IRS Spectral Map Reduction
@end direntry
@set EDITION 1.0
@set VERSION 0.95
@set IDLVERSIONREQUIRED 6.1
@set DATE April, 2006
@set AUTHOR J.D. Smith
@set AUTHOREMAIL jdsmith@@as.arizona.edu
@set CUBISMHOMEPAGE http://sings.stsci.edu/cubism

@c %**end of header
@finalout

@ifinfo 
This file documents CUBISM, an IDL program for reducing and analyzing
IRS Spectral Maps.

This is edition @value{EDITION} of the @cite{CUBISM User Manual} for
CUBISM @value{VERSION}

Copyright @copyright{} 2006 J.D. Smith

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover texts being ``A GNU Manual'',
and with the Back-Cover Texts as in (a) below.  A copy of the license is
included in the section entitled ``GNU Free Documentation License'' in
the Emacs manual.

(a) The FSF's Back-Cover Text is: ``You have freedom to copy and modify
this GNU Manual, like GNU software.  Copies published by the Free
Software Foundation raise funds for GNU development.''

This document is part of a collection distributed under the GNU Free
Documentation License.  If you want to distribute this document
separately from the collection, you can do so by adding a copy of the
license to the document, as described in section 6 of the license.
@end ifinfo

@c
@c Title Page
@c

@titlepage
@title CUBISM User Manual
@subtitle IRS Spectral Map Analysis and Reduction
@subtitle Edition @value{EDITION}, @value{DATE}

@sp 4
@center @image{images/logo2,,,Cubism Logo}

@author by J.D. Smith and the SINGS team
@page

This is edition @value{EDITION} of the @cite{CUBISM User Manual} for
CUBISM version @value{VERSION}, @value{DATE}.
@sp 2

@cindex Copyright, of CUBISM
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover texts being ``A GNU
Manual'', and with the Back-Cover Texts as in (a) below.  A copy of the
license is included in the section entitled ``GNU Free Documentation
License'' in the Emacs manual.

(a) The FSF's Back-Cover Text is: ``You have freedom to copy and modify
this GNU Manual, like GNU software.  Copies published by the Free
Software Foundation raise funds for GNU development.''

This document is part of a collection distributed under the GNU Free
Documentation License.  If you want to distribute this document
separately from the collection, you can do so by adding a copy of the
license to the document, as described in section 6 of the license.
@end titlepage

@contents

@page

@ifnottex

@node Top, Introduction, (dir), (dir)

CUBISM is a package written in the Interactive Data Language (IDL),
which supports the analaysis and reduction of spectral maps created with
the @uref{http://ssc.spitzer.caltech.edu/irs/,IRS Spectrograph} aboard
the @uref{http://ssc.spitzer.caltech.edu/,Spitzer Space Telescope}.

@end ifnottex

@c menu

@menu
* Introduction::                
* Installation::                
* Quick Start Guide::           
* Cube Building::               
* Cube Analysis::               
* Cube Validation::             
* CubeProject Reference::       
* CubeView Reference::          
* CubeSpec Reference::          
* Index::                       

@detailmenu
 --- The Detailed Node Listing ---

Installation

* Source Installation::         
* Binary Installation::         

Cube Building

* Input Files and Calibration::  
* Backgrounds::                 
* Bad Pixels::                  

Bad Pixels

* Selecting/Defining Bad Pixels::  

@end detailmenu
@end menu

@c=====================================
@c============= Chapters
@c=====================================


@c
@c Introduction
@c

@node Introduction, Installation, Top, Top
@chapter Introduction
@cindex Introduction

CUBISM is a package written in the Interactive Data Language (IDL),
which supports the analaysis and reduction of spectral maps created with
the @uref{http://ssc.spitzer.caltech.edu/irs/,IRS Spectrograph} aboard
the @uref{http://ssc.spitzer.caltech.edu/,Spitzer Space Telescope}.
CUBISM is designed to allow sets of basic calibrated data (BCDs) from
IRS mapping observations to be combined into single 3D spectral cubes,
with two spatial and one spectral dimension.  From these cubes, spectra
can be extracted over differing apertures, and arbitrary maps can be
made in spectral features (e.g. a line image).  

CUBISM consists of three main components, which together form the core
of its analysis and reduction capabilities:

@multitable @columnfractions .2 .8

@item CubeProject
@tab Manage BCD data, and track all the various information required to
build cubes, including calibration data, background information, bad
pixels, aperture information, etc.

@item CubeView
@tab General purpose viewer with a variety of tools for interacting with
2D spectral images, full spectral cubes, and visualization overlay FITS
images.

@item CubeSpec
@tab View and manipulate extracted spectra, and create maps from
spectral cubes.
@end multitable

@noindent CUBISM is not a general purpose spectral analysis tool.  What
analysis tools it offers are oriented directly towards the task of
creating, validating, and analyzing spectral cubes.  Since individual
spectra (perhaps many of them) can be output from a single cube, other
tools can easily be used for higher order analysis of these products
(e.g. multiple Gaussian fitting, etc.).

The basics of building and manipulating a spectral cube are very simple.
This manual is organized as follows.  After discussing the installation
and requirements of CUBISM in @ref{Installation}, we give a fast start
guide to building a spectral cube from a mapping data set in @ref{Quick
Start Guide}.  We then discuss in greater depth the steps required to
build a cube in @ref{Cube Building}, explain methods of analyzing the
cube in @ref{Cube Analysis}, and cover validating and improving cubes in
@ref{Cube Validation}.

Note that this manual does not include information on planning IRS
spectral mapping observations; see the
@uref{http://ssc.spitzer.caltech.edu/irs/documents/specmap_bop/, IRS
Spectral Map HOWTO} for information on observation planning.


@c
@c Installation
@c

@node Installation, Quick Start Guide, Introduction, Top
@chapter Installation
@cindex Installation

CUBISM runs under IDL, so requires a working version of IDL to function.
There are two means of installing CUBISM: as source @file{.pro} files,
or as a compiled binary.  The advantages of a source installation are:

@itemize @bullet
@item
Access to CUBISM's code for bug fixing or examining algorithms.
@item
Source level feedback when bugs occur (see XXX).
@item
Should continue to function with future versions of IDL.
@end itemize

@noindent The disadvantages of the source installation are:

@itemize @bullet
@item
Must install the AstroLib dependency library, at the required version.
Some (small) risk of future changes in AstroLib causing problems.
@item
Subject to routine name conflicts (e.g. two routines named
@file{routine.pro} on the path), so you must carefully set your
@samp{IDL_PATH} to be sure CUBISM's files are found first.  This should
not be a common problem, but earlier distributions of SMART did have
some conflicting file names.
@end itemize

@noindent The advantages of installing and running a binary version of CUBISM:

@itemize @bullet
@item
All required routines are included in the compiled file at the required
version; no need to install external libraries.
@item
No routine name conflicts should occur.
@item 
Can be used with the freely available @emph{IDL VM}, if you don't have
access to an IDL license.
@end itemize


@noindent and the disadvantages:

@itemize @bullet
@item
No access to source code level debugging feedback when errors occur,
making it harder to track down problems.
@item
More closely tied to the IDL version; a given binary may not work with
all future versions of IDL (though typically binary compatibility
between IDL versions is quite good).
@end itemize

@menu
* Source Installation::         
* Binary Installation::         
@end menu

@node Source Installation, Binary Installation, Installation, Installation
@section Source Installation
@cindex, Installation, from source

The requirements for CUBISM running from source are:

@enumerate
@item
A Linux/Solaris/Unix or MacOSX platform.  CUBISM may run under Windows,
but has not been tested there.
@item
A licensed copy of IDL at version @value{IDLVERSIONREQUIRED} or later.
Download @uref{http://rsinc.com/idl/,from RSI}.
@item
The AstroLib library, available from
@uref{http://idlastro.gsfc.nasa.gov/, NASA Goddard}.  Be sure to include
it on your @samp{IDL_PATH}.
@item
A compiler for C source, typically @samp{gcc}, or whatever the IDL
routine @samp{MAKE_DLL} looks for.
@end enumerate

The compiler is required to auto-compile a small piece of C code used to
speed-up the cube building algorithm.  If this compilation fails, and
IDL version of this algorithm will be used, which gives the same
results, but operates more slowly.

@node Binary Installation,  , Source Installation, Installation
@section Binary Installation
@cindex, Installation, binary

The requirements for CUBISM running as a binary:

@enumerate
@item
A Linux/Solaris/Unix or MacOSX platform.  CUBISM may run under Windows,
but has not been tested there.
@item
A copy of IDL at version @value{IDLVERSIONREQUIRED} or later.  This can
either be a fully licensed copy, or the @emph{IDL VM}, the freely
available virtual machine.  Download either
@uref{http://rsinc.com/idl/,from RSI}.
@item
A compiler for C source, typically @samp{gcc}, or whatever the IDL
routine @samp{MAKE_DLL} looks for.
@end enumerate

Note that running CUBISM as a binary under the free @emph{IDL VM} does
not give you access to an IDL command line, so that only the graphical
interface to CUBISM is accessible.  With this setup, no analysis can be
performed at the command line, though all files, including spectra,
maps, and cubes can be output as normal.  Running CUBISM as a binary
under a licensed version of IDL does not prevent access to the command
line.

@node Quick Start Guide, Cube Building, Installation, Top
@chapter Quick Start Guide
@cindex Quick Start

A quick start guide.

@node Cube Building, Cube Analysis, Quick Start Guide, Top
@chapter Cube Building
@cindex Cube Building

@menu
* Input Files and Calibration::  
* Backgrounds::                 
* Bad Pixels::                  
@end menu

A general reference on building cubes from BCD source.

@node Input Files and Calibration, Backgrounds, Cube Building, Cube Building
@section Input Files and Calibration
@cindex BCD files
@cindex Calibration sets
@cindex Files, input
@cindex Input files

File naming convention.


@node Backgrounds, Bad Pixels, Input Files and Calibration, Cube Building
@section Backgrounds
@cindex Background subtraction

Notes on in situ, archive, and other sources for background subtraction,
including the use of the visualizer for selecting in situ BCDs.

@subsection In Situ Sky

Subtracting off contemporaneous sky data from your Spitzer IRS target data does more than just remove foreground emission (e.g., zodiacal, Galactic).  It also tremendously reduces the number of "bad pixels" contaminating your data.

If you unfortunately do not have access to dedicated, contemporaneous, off-target sky data, in many instances the physical configuration of the IRS low-resolution modules provides an alternative.  Below is a description of how to define sky data from IRS low-resolution "outrigger" data.  The example given is for short-low (SL) data, but similar steps can be taken for long-low data.

To define the low-resolution sky BCDs, and to create a corresponding .bgl file for data cube construction within CUBISM:

@enumerate
@item
Load all the relevant SL (SL1+SL2) frames.  Don't mix data taken more than a few days apart, to minimize the effects of day-to-day changes in the bad pixel population. 
@item
Use the AOR visualizer with an 8um image.  After using the histogram box to scale the image such that low-level diffuse emission is apparent, hit 'v' to switch to visualize mode.  To define sky BCDs for SL1, for example, set the cube build order to 2 (Cube-Set Cube Build Order->2) so that SL1 is not on the bright target source, and see which SL1 outriggers conveniently land off your target.  Highlight these outriggers with the mouse.  Save this information into a .bgl file using Background->Save Background Recs->m51_opticallyselected_extranuc_SL1.bgl.
@item
Repeat for SL2.
@end enumerate

@node Bad Pixels,  , Backgrounds, Cube Building
@section Bad Pixels
@cindex Bad Pixels
@cindex Rogue pixels

An exposition on selecting manual and automatic bad pixels.  Bad pixels
are bad.  Bad pixels, bad.

A number of marks are drawn in CubeView to indicate global bad pixels,
record level bad pixels, and various conditions and flags from the
pipeline generated mask files @samp{BMASK} and @samp{PMASK}.  The
various symbols seen when in @samp{Mark Bad Pixel} mode are:


@multitable @columnfractions .2 .8
@item Cyan @samp{x}s
@tab Global user-defined bad pixels, applying to all records.

@item Green @samp{x}s
@tab Record-level user bad pixels, applying only to a single record.

@item Blue @samp{+}s
@tab Locations where the @samp{PMASK} (permanent mask) has any bit set.
The @samp{PMASK} typically contains a small number of unruly pixels.

@item Red @samp{diamonds}s
@tab Non-fatal bits set in the @samp{BMASK}.

@item Red @samp{x}s
@tab Fatal bits set in the @samp{BMASK}.  These are bits 12, 13 and 14,
i.e. none or only one usable sample in the exposure ramp, or pixel
fatally flagged in the @samp{PMASK}.

@end multitable

@noindent See the @uref{http://ssc.spitzer.caltech.edu/irs/dh/,IRS Data
Handbook} for a reference on the individual mask bits which the IRS
pipeline applies.  Note that despite being a fatal mask value, bit 8 in
the @samp{BMASK} (not flat fielded) is not marked, since it occurs
everywhere off the orders.  All @samp{BMASK} values, whether marked or
not, are indicated in the status display line.


When viewing and setting bad pixels in CubeView, @kbd{Mouse-3} can be
used to cycle through 4 settings controlling which bad pixels are
indicated:

@enumerate
@item
All mask and user-set bad pixels marks.
@item
All mask and user-set bad pixels marks, except for non-fatal
@samp{BMASK} marks.
@item
All fatal @samp{BMASK} mask and user-set bad pixel marks.
@item
Only user-set bad pixel marks.
@end enumerate

@noindent @kbd{Shift-Mouse-3} cycles in the opposite direction.


@menu
* Selecting/Defining Bad Pixels::  
@end menu

@node Selecting/Defining Bad Pixels,  , Bad Pixels, Bad Pixels
@subsection Selecting/Defining Bad Pixels

Bad pixels can be identified in CUBISM either 'manually' or in an automatic fashion.  The procedure for automatically identifying bad pixels is described in Section XX.

@enumerate
@item
 View the stack of relevant BCDs.
@item
 Show the wavsamp.
@item
 Click @samp{BGSub} (if available) to remove many bad pixels using the
 sky background data previously defined.
@item
 Enlarge the stack viewer to the largest possible perspective.
@item
 Show the current (cyan) bad pixel mask.
@item
 Set the scaling stretch to show just the very brightest pixels.
@item
 Mark ~ >4 sigma deviations, but ensure you are not marking line data!
@item
 Reset the scaling to show the next brightest set of pixels.
@item
 Mark ~ >4 sigma deviations.
@item
 Iterate this process until you can clearly see emisison lines, to the
point where the viewable pixels are no longer >4 sigma deviations.
@item
Save the bad pixel mask.
@item
Build the cube with this mask.
@item
Inspect each wavelength plane for weird, out-of-place columns/rows.
@item
Use the backtrack tool to note any additional pixels to be masked.
@item
Finally, extract a 1d spectrum and look for spikes that aren't lines.
@end enumerate


@node  Cube Analysis, Cube Validation, Cube Building, Top
@chapter Cube Analysis
@cindex Cube Analysis

A description of cube extraction, map making, map sets, line fitting,
etc.


@node  Cube Validation, CubeProject Reference, Cube Analysis, Top
@chapter Cube Validation
@cindex Cube Validation

A description of backtracking and other means of validating and
improving the cube, and checking on weak features, etc.



@c
@c Appendices
@c

@node CubeProject Reference, CubeView Reference, Cube Validation, Top
@appendix CubeProject Reference
@cindex CubeProject

A detailed listing of all CubeProject menus etc.

@node CubeView Reference, CubeSpec Reference, CubeProject Reference, Top
@appendix CubeView Reference
@cindex CubeView

A detailed listing of all CubeView tools, menus etc.

@node CubeSpec Reference, Index, CubeView Reference, Top
@appendix CubeSpec Reference
@cindex CubeSpec

A detailed listing of all CubeSpec, menus etc.

@node Index,  , CubeSpec Reference, Top
@unnumbered Index
@printindex cp

@bye
